// <auto-generated/>
#nullable enable

namespace app.Graphql
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginResult : global::System.IEquatable<LoginResult>, ILoginResult
    {
        public LoginResult(global::app.Graphql.ILogin_Account? account)
        {
            Account = account;
        }

        public global::app.Graphql.ILogin_Account? Account { get; }

        public virtual global::System.Boolean Equals(LoginResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class Login_Account_AccountMutationType : global::System.IEquatable<Login_Account_AccountMutationType>, ILogin_Account_AccountMutationType
    {
        public Login_Account_AccountMutationType(global::System.String? login)
        {
            Login = login;
        }

        public global::System.String? Login { get; }

        public virtual global::System.Boolean Equals(Login_Account_AccountMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Login is null && other.Login is null) || Login != null && Login.Equals(other.Login)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Login_Account_AccountMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Login != null)
                {
                    hash ^= 397 * Login.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ILoginResult
    {
        public global::app.Graphql.ILogin_Account? Account { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ILogin_Account
    {
        public global::System.String? Login { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ILogin_Account_AccountMutationType : ILogin_Account
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterResult : global::System.IEquatable<RegisterResult>, IRegisterResult
    {
        public RegisterResult(global::app.Graphql.IRegister_Account? account)
        {
            Account = account;
        }

        public global::app.Graphql.IRegister_Account? Account { get; }

        public virtual global::System.Boolean Equals(RegisterResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class Register_Account_AccountMutationType : global::System.IEquatable<Register_Account_AccountMutationType>, IRegister_Account_AccountMutationType
    {
        public Register_Account_AccountMutationType(global::System.String? register)
        {
            Register = register;
        }

        public global::System.String? Register { get; }

        public virtual global::System.Boolean Equals(Register_Account_AccountMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Register is null && other.Register is null) || Register != null && Register.Equals(other.Register)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Register_Account_AccountMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Register != null)
                {
                    hash ^= 397 * Register.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRegisterResult
    {
        public global::app.Graphql.IRegister_Account? Account { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRegister_Account
    {
        public global::System.String? Register { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRegister_Account_AccountMutationType : IRegister_Account
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResult : global::System.IEquatable<RefreshTokenResult>, IRefreshTokenResult
    {
        public RefreshTokenResult(global::app.Graphql.IRefreshToken_Account? account)
        {
            Account = account;
        }

        public global::app.Graphql.IRefreshToken_Account? Account { get; }

        public virtual global::System.Boolean Equals(RefreshTokenResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshTokenResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshToken_Account_AccountMutationType : global::System.IEquatable<RefreshToken_Account_AccountMutationType>, IRefreshToken_Account_AccountMutationType
    {
        public RefreshToken_Account_AccountMutationType(global::System.String? refreshToken)
        {
            RefreshToken = refreshToken;
        }

        public global::System.String? RefreshToken { get; }

        public virtual global::System.Boolean Equals(RefreshToken_Account_AccountMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RefreshToken is null && other.RefreshToken is null) || RefreshToken != null && RefreshToken.Equals(other.RefreshToken)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RefreshToken_Account_AccountMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RefreshToken != null)
                {
                    hash ^= 397 * RefreshToken.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenResult
    {
        public global::app.Graphql.IRefreshToken_Account? Account { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_Account
    {
        public global::System.String? RefreshToken { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshToken_Account_AccountMutationType : IRefreshToken_Account
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectResult : global::System.IEquatable<CreateProjectResult>, ICreateProjectResult
    {
        public CreateProjectResult(global::app.Graphql.ICreateProject_Project? project)
        {
            Project = project;
        }

        public global::app.Graphql.ICreateProject_Project? Project { get; }

        public virtual global::System.Boolean Equals(CreateProjectResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProjectResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProject_Project_ProjectMutationType : global::System.IEquatable<CreateProject_Project_ProjectMutationType>, ICreateProject_Project_ProjectMutationType
    {
        public CreateProject_Project_ProjectMutationType(global::System.String? @add)
        {
            Add = @add;
        }

        public global::System.String? Add { get; }

        public virtual global::System.Boolean Equals(CreateProject_Project_ProjectMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Add is null && other.Add is null) || Add != null && Add.Equals(other.Add)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProject_Project_ProjectMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Add != null)
                {
                    hash ^= 397 * Add.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateProjectResult
    {
        public global::app.Graphql.ICreateProject_Project? Project { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateProject_Project
    {
        public global::System.String? Add { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateProject_Project_ProjectMutationType : ICreateProject_Project
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsResult : global::System.IEquatable<GetProjectsResult>, IGetProjectsResult
    {
        public GetProjectsResult(global::app.Graphql.IGetProjects_Projects? projects)
        {
            Projects = projects;
        }

        public global::app.Graphql.IGetProjects_Projects? Projects { get; }

        public virtual global::System.Boolean Equals(GetProjectsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Projects is null && other.Projects is null) || Projects != null && Projects.Equals(other.Projects)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Projects != null)
                {
                    hash ^= 397 * Projects.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_ProjectConnection : global::System.IEquatable<GetProjects_Projects_ProjectConnection>, IGetProjects_Projects_ProjectConnection
    {
        public GetProjects_Projects_ProjectConnection(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes?>? nodes, global::app.Graphql.IGetProjects_Projects_PageInfo pageInfo, global::System.Int32 totalCount)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::app.Graphql.IGetProjects_Projects_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_ProjectConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo) && TotalCount == other.TotalCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_ProjectConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_Project : global::System.IEquatable<GetProjects_Projects_Nodes_Project>, IGetProjects_Projects_Nodes_Project
    {
        public GetProjects_Projects_Nodes_Project(global::System.String? description, global::System.String? id, global::System.String? companyId, global::app.Graphql.Status status, global::System.String? title, global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>? userProjects, global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>? users)
        {
            Description = description;
            Id = id;
            CompanyId = companyId;
            Status = status;
            Title = title;
            UserProjects = userProjects;
            Users = users;
        }

        public global::System.String? Description { get; }

        public global::System.String? Id { get; }

        public global::System.String? CompanyId { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? Title { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>? UserProjects { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>? Users { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_Project? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description))) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((CompanyId is null && other.CompanyId is null) || CompanyId != null && CompanyId.Equals(other.CompanyId)) && Status.Equals(other.Status) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(UserProjects, other.UserProjects) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Users, other.Users);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_Project)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (CompanyId != null)
                {
                    hash ^= 397 * CompanyId.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (UserProjects != null)
                {
                    foreach (var UserProjects_elm in UserProjects)
                    {
                        if (UserProjects_elm != null)
                        {
                            hash ^= 397 * UserProjects_elm.GetHashCode();
                        }
                    }
                }

                if (Users != null)
                {
                    foreach (var Users_elm in Users)
                    {
                        if (Users_elm != null)
                        {
                            hash ^= 397 * Users_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_PageInfo_PageInfo : global::System.IEquatable<GetProjects_Projects_PageInfo_PageInfo>, IGetProjects_Projects_PageInfo_PageInfo
    {
        public GetProjects_Projects_PageInfo_PageInfo(global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor)
        {
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor))) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_UserProjects_UserProject : global::System.IEquatable<GetProjects_Projects_Nodes_UserProjects_UserProject>, IGetProjects_Projects_Nodes_UserProjects_UserProject
    {
        public GetProjects_Projects_Nodes_UserProjects_UserProject(global::System.String? userId, global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? user)
        {
            UserId = userId;
            User = user;
        }

        public global::System.String? UserId { get; }

        public global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? User { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_UserProjects_UserProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserId is null && other.UserId is null) || UserId != null && UserId.Equals(other.UserId))) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_UserProjects_UserProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserId != null)
                {
                    hash ^= 397 * UserId.GetHashCode();
                }

                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_Users_User : global::System.IEquatable<GetProjects_Projects_Nodes_Users_User>, IGetProjects_Projects_Nodes_Users_User
    {
        public GetProjects_Projects_Nodes_Users_User(global::System.String? userName)
        {
            UserName = userName;
        }

        public global::System.String? UserName { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserName is null && other.UserName is null) || UserName != null && UserName.Equals(other.UserName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserName != null)
                {
                    hash ^= 397 * UserName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_UserProjects_User_User : global::System.IEquatable<GetProjects_Projects_Nodes_UserProjects_User_User>, IGetProjects_Projects_Nodes_UserProjects_User_User
    {
        public GetProjects_Projects_Nodes_UserProjects_User_User(global::System.String? userName)
        {
            UserName = userName;
        }

        public global::System.String? UserName { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_UserProjects_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserName is null && other.UserName is null) || UserName != null && UserName.Equals(other.UserName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_UserProjects_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserName != null)
                {
                    hash ^= 397 * UserName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjectsResult
    {
        public global::app.Graphql.IGetProjects_Projects? Projects { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::app.Graphql.IGetProjects_Projects_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_ProjectConnection : IGetProjects_Projects
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes
    {
        public global::System.String? Description { get; }

        public global::System.String? Id { get; }

        public global::System.String? CompanyId { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? Title { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>? UserProjects { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>? Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_Project : IGetProjects_Projects_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_PageInfo
    {
        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_PageInfo_PageInfo : IGetProjects_Projects_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_UserProjects
    {
        public global::System.String? UserId { get; }

        public global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_UserProjects_UserProject : IGetProjects_Projects_Nodes_UserProjects
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_Users
    {
        public global::System.String? UserName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_Users_User : IGetProjects_Projects_Nodes_Users
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_UserProjects_User
    {
        public global::System.String? UserName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjects_Projects_Nodes_UserProjects_User_User : IGetProjects_Projects_Nodes_UserProjects_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectResult : global::System.IEquatable<AddUserInProjectResult>, IAddUserInProjectResult
    {
        public AddUserInProjectResult(global::app.Graphql.IAddUserInProject_Project? project)
        {
            Project = project;
        }

        public global::app.Graphql.IAddUserInProject_Project? Project { get; }

        public virtual global::System.Boolean Equals(AddUserInProjectResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddUserInProjectResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProject_Project_ProjectMutationType : global::System.IEquatable<AddUserInProject_Project_ProjectMutationType>, IAddUserInProject_Project_ProjectMutationType
    {
        public AddUserInProject_Project_ProjectMutationType(global::System.String? addUser)
        {
            AddUser = addUser;
        }

        public global::System.String? AddUser { get; }

        public virtual global::System.Boolean Equals(AddUserInProject_Project_ProjectMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddUser is null && other.AddUser is null) || AddUser != null && AddUser.Equals(other.AddUser)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddUserInProject_Project_ProjectMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddUser != null)
                {
                    hash ^= 397 * AddUser.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddUserInProjectResult
    {
        public global::app.Graphql.IAddUserInProject_Project? Project { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddUserInProject_Project
    {
        public global::System.String? AddUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddUserInProject_Project_ProjectMutationType : IAddUserInProject_Project
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyResult : global::System.IEquatable<GetCompanyResult>, IGetCompanyResult
    {
        public GetCompanyResult(global::app.Graphql.IGetCompany_Companies? companies)
        {
            Companies = companies;
        }

        public global::app.Graphql.IGetCompany_Companies? Companies { get; }

        public virtual global::System.Boolean Equals(GetCompanyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Companies is null && other.Companies is null) || Companies != null && Companies.Equals(other.Companies)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCompanyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Companies != null)
                {
                    hash ^= 397 * Companies.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompany_Companies_CompanyConnection : global::System.IEquatable<GetCompany_Companies_CompanyConnection>, IGetCompany_Companies_CompanyConnection
    {
        public GetCompany_Companies_CompanyConnection(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetCompany_Companies_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetCompany_Companies_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetCompany_Companies_CompanyConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCompany_Companies_CompanyConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompany_Companies_Nodes_Company : global::System.IEquatable<GetCompany_Companies_Nodes_Company>, IGetCompany_Companies_Nodes_Company
    {
        public GetCompany_Companies_Nodes_Company(global::System.String? id, global::System.String? name, global::app.Graphql.Status status)
        {
            Id = id;
            Name = name;
            Status = status;
        }

        public global::System.String? Id { get; }

        public global::System.String? Name { get; }

        public global::app.Graphql.Status Status { get; }

        public virtual global::System.Boolean Equals(GetCompany_Companies_Nodes_Company? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Status.Equals(other.Status);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCompany_Companies_Nodes_Company)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompanyResult
    {
        public global::app.Graphql.IGetCompany_Companies? Companies { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompany_Companies
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetCompany_Companies_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompany_Companies_CompanyConnection : IGetCompany_Companies
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompany_Companies_Nodes
    {
        public global::System.String? Id { get; }

        public global::System.String? Name { get; }

        public global::app.Graphql.Status Status { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompany_Companies_Nodes_Company : IGetCompany_Companies_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserResult : global::System.IEquatable<CreateUserResult>, ICreateUserResult
    {
        public CreateUserResult(global::app.Graphql.ICreateUser_User? user)
        {
            User = user;
        }

        public global::app.Graphql.ICreateUser_User? User { get; }

        public virtual global::System.Boolean Equals(CreateUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUser_User_UserMutationType : global::System.IEquatable<CreateUser_User_UserMutationType>, ICreateUser_User_UserMutationType
    {
        public CreateUser_User_UserMutationType(global::System.String? @add)
        {
            Add = @add;
        }

        public global::System.String? Add { get; }

        public virtual global::System.Boolean Equals(CreateUser_User_UserMutationType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Add is null && other.Add is null) || Add != null && Add.Equals(other.Add)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUser_User_UserMutationType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Add != null)
                {
                    hash ^= 397 * Add.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateUserResult
    {
        public global::app.Graphql.ICreateUser_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateUser_User
    {
        public global::System.String? Add { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateUser_User_UserMutationType : ICreateUser_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersResult : global::System.IEquatable<GetUsersResult>, IGetUsersResult
    {
        public GetUsersResult(global::app.Graphql.IGetUsers_Users? users)
        {
            Users = users;
        }

        public global::app.Graphql.IGetUsers_Users? Users { get; }

        public virtual global::System.Boolean Equals(GetUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Users is null && other.Users is null) || Users != null && Users.Equals(other.Users)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Users != null)
                {
                    hash ^= 397 * Users.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_UserConnection : global::System.IEquatable<GetUsers_Users_UserConnection>, IGetUsers_Users_UserConnection
    {
        public GetUsers_Users_UserConnection(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetUsers_Users_Nodes?>? nodes, global::app.Graphql.IGetUsers_Users_PageInfo pageInfo, global::System.Int32 totalCount)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetUsers_Users_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::app.Graphql.IGetUsers_Users_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_UserConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo) && TotalCount == other.TotalCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_UserConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_Nodes_User : global::System.IEquatable<GetUsers_Users_Nodes_User>, IGetUsers_Users_Nodes_User
    {
        public GetUsers_Users_Nodes_User(global::app.Graphql.IGetUsers_Users_Nodes_Company? company, global::System.String? id, global::System.String? email, global::System.String? phoneNumber, global::app.Graphql.Status status, global::System.String? userName, global::System.String? companyId)
        {
            Company = company;
            Id = id;
            Email = email;
            PhoneNumber = phoneNumber;
            Status = status;
            UserName = userName;
            CompanyId = companyId;
        }

        public global::app.Graphql.IGetUsers_Users_Nodes_Company? Company { get; }

        public global::System.String? Id { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? UserName { get; }

        public global::System.String? CompanyId { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_Nodes_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Company is null && other.Company is null) || Company != null && Company.Equals(other.Company))) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PhoneNumber is null && other.PhoneNumber is null) || PhoneNumber != null && PhoneNumber.Equals(other.PhoneNumber)) && Status.Equals(other.Status) && ((UserName is null && other.UserName is null) || UserName != null && UserName.Equals(other.UserName)) && ((CompanyId is null && other.CompanyId is null) || CompanyId != null && CompanyId.Equals(other.CompanyId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_Nodes_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Company != null)
                {
                    hash ^= 397 * Company.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PhoneNumber != null)
                {
                    hash ^= 397 * PhoneNumber.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                if (UserName != null)
                {
                    hash ^= 397 * UserName.GetHashCode();
                }

                if (CompanyId != null)
                {
                    hash ^= 397 * CompanyId.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_PageInfo_PageInfo : global::System.IEquatable<GetUsers_Users_PageInfo_PageInfo>, IGetUsers_Users_PageInfo_PageInfo
    {
        public GetUsers_Users_PageInfo_PageInfo(global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor)
        {
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor))) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_Nodes_Company_Company : global::System.IEquatable<GetUsers_Users_Nodes_Company_Company>, IGetUsers_Users_Nodes_Company_Company
    {
        public GetUsers_Users_Nodes_Company_Company(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_Nodes_Company_Company? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_Nodes_Company_Company)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsersResult
    {
        public global::app.Graphql.IGetUsers_Users? Users { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetUsers_Users_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::app.Graphql.IGetUsers_Users_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_UserConnection : IGetUsers_Users
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_Nodes
    {
        public global::app.Graphql.IGetUsers_Users_Nodes_Company? Company { get; }

        public global::System.String? Id { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? UserName { get; }

        public global::System.String? CompanyId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_Nodes_User : IGetUsers_Users_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_PageInfo
    {
        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_PageInfo_PageInfo : IGetUsers_Users_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_Nodes_Company
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsers_Users_Nodes_Company_Company : IGetUsers_Users_Nodes_Company
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginModelInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "LoginModelInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.LoginModelInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.ILoginModelInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsUsernameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("username", FormatUsername(input.Username)));
            }

            if (inputInfo.IsPasswordSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("password", FormatPassword(input.Password)));
            }

            return fields;
        }

        private global::System.Object? FormatUsername(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatPassword(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginModelInput : global::app.Graphql.State.ILoginModelInputInfo, global::System.IEquatable<LoginModelInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginModelInput)obj);
        }

        public virtual global::System.Boolean Equals(LoginModelInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Username.Equals(other.Username)) && Password.Equals(other.Password);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Username.GetHashCode();
                hash ^= 397 * Password.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_username = default !;
        private global::System.Boolean _set_username;
        private global::System.String _value_password = default !;
        private global::System.Boolean _set_password;
        public global::System.String Username
        {
            get => _value_username;
            set
            {
                _set_username = true;
                _value_username = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ILoginModelInputInfo.IsUsernameSet => _set_username;
        public global::System.String Password
        {
            get => _value_password;
            set
            {
                _set_password = true;
                _value_password = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ILoginModelInputInfo.IsPasswordSet => _set_password;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterModelInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "RegisterModelInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.RegisterModelInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IRegisterModelInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCompanyNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("companyName", FormatCompanyName(input.CompanyName)));
            }

            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            if (inputInfo.IsPasswordConfirmationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("passwordConfirmation", FormatPasswordConfirmation(input.PasswordConfirmation)));
            }

            if (inputInfo.IsUsernameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("username", FormatUsername(input.Username)));
            }

            if (inputInfo.IsPasswordSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("password", FormatPassword(input.Password)));
            }

            return fields;
        }

        private global::System.Object? FormatCompanyName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatEmail(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatPasswordConfirmation(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatUsername(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatPassword(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterModelInput : global::app.Graphql.State.IRegisterModelInputInfo, global::System.IEquatable<RegisterModelInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterModelInput)obj);
        }

        public virtual global::System.Boolean Equals(RegisterModelInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CompanyName.Equals(other.CompanyName)) && Email.Equals(other.Email) && PasswordConfirmation.Equals(other.PasswordConfirmation) && Username.Equals(other.Username) && Password.Equals(other.Password);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CompanyName.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * PasswordConfirmation.GetHashCode();
                hash ^= 397 * Username.GetHashCode();
                hash ^= 397 * Password.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_companyName = default !;
        private global::System.Boolean _set_companyName;
        private global::System.String _value_email = default !;
        private global::System.Boolean _set_email;
        private global::System.String _value_passwordConfirmation = default !;
        private global::System.Boolean _set_passwordConfirmation;
        private global::System.String _value_username = default !;
        private global::System.Boolean _set_username;
        private global::System.String _value_password = default !;
        private global::System.Boolean _set_password;
        public global::System.String CompanyName
        {
            get => _value_companyName;
            set
            {
                _set_companyName = true;
                _value_companyName = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IRegisterModelInputInfo.IsCompanyNameSet => _set_companyName;
        public global::System.String Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IRegisterModelInputInfo.IsEmailSet => _set_email;
        public global::System.String PasswordConfirmation
        {
            get => _value_passwordConfirmation;
            set
            {
                _set_passwordConfirmation = true;
                _value_passwordConfirmation = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IRegisterModelInputInfo.IsPasswordConfirmationSet => _set_passwordConfirmation;
        public global::System.String Username
        {
            get => _value_username;
            set
            {
                _set_username = true;
                _value_username = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IRegisterModelInputInfo.IsUsernameSet => _set_username;
        public global::System.String Password
        {
            get => _value_password;
            set
            {
                _set_password = true;
                _value_password = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IRegisterModelInputInfo.IsPasswordSet => _set_password;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectVmInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "CreateProjectVmInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.CreateProjectVmInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.ICreateProjectVmInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            return fields;
        }

        private global::System.Object? FormatTitle(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectVmInput : global::app.Graphql.State.ICreateProjectVmInputInfo, global::System.IEquatable<CreateProjectVmInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProjectVmInput)obj);
        }

        public virtual global::System.Boolean Equals(CreateProjectVmInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title)) && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_title = default !;
        private global::System.Boolean _set_title;
        private global::System.String _value_description = default !;
        private global::System.Boolean _set_description;
        public global::System.String Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICreateProjectVmInputInfo.IsTitleSet => _set_title;
        public global::System.String Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICreateProjectVmInputInfo.IsDescriptionSet => _set_description;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ProjectFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _projectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _statusOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _companyFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _listFilterInputTypeOfUserProjectFilterInputFormatter = default !;
        public global::System.String TypeName => "ProjectFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _projectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ProjectFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _statusOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StatusOperationFilterInput");
            _companyFilterInputFormatter = serializerResolver.GetInputValueFormatter("CompanyFilterInput");
            _listFilterInputTypeOfUserProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ListFilterInputTypeOfUserProjectFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ProjectFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IProjectFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsCompanyIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("companyId", FormatCompanyId(input.CompanyId)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsStatusSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("status", FormatStatus(input.Status)));
            }

            if (inputInfo.IsCompanySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("company", FormatCompany(input.Company)));
            }

            if (inputInfo.IsUserProjectsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userProjects", FormatUserProjects(input.UserProjects)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_projectFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_projectFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCompanyId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDescription(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStatus(global::app.Graphql.StatusOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _statusOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCompany(global::app.Graphql.CompanyFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _companyFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUserProjects(global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _listFilterInputTypeOfUserProjectFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ProjectFilterInput : global::app.Graphql.State.IProjectFilterInputInfo, global::System.IEquatable<ProjectFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ProjectFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ProjectFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((CompanyId is null && other.CompanyId is null) || CompanyId != null && CompanyId.Equals(other.CompanyId)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((Company is null && other.Company is null) || Company != null && Company.Equals(other.Company)) && ((UserProjects is null && other.UserProjects is null) || UserProjects != null && UserProjects.Equals(other.UserProjects));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (CompanyId != null)
                {
                    hash ^= 397 * CompanyId.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (Company != null)
                {
                    hash ^= 397 * Company.GetHashCode();
                }

                if (UserProjects != null)
                {
                    hash ^= 397 * UserProjects.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::app.Graphql.StringOperationFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::app.Graphql.StringOperationFilterInput? _value_companyId;
        private global::System.Boolean _set_companyId;
        private global::app.Graphql.StringOperationFilterInput? _value_title;
        private global::System.Boolean _set_title;
        private global::app.Graphql.StringOperationFilterInput? _value_description;
        private global::System.Boolean _set_description;
        private global::app.Graphql.StatusOperationFilterInput? _value_status;
        private global::System.Boolean _set_status;
        private global::app.Graphql.CompanyFilterInput? _value_company;
        private global::System.Boolean _set_company;
        private global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? _value_userProjects;
        private global::System.Boolean _set_userProjects;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.ProjectFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsOrSet => _set_or;
        public global::app.Graphql.StringOperationFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsIdSet => _set_id;
        public global::app.Graphql.StringOperationFilterInput? CompanyId
        {
            get => _value_companyId;
            set
            {
                _set_companyId = true;
                _value_companyId = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsCompanyIdSet => _set_companyId;
        public global::app.Graphql.StringOperationFilterInput? Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsTitleSet => _set_title;
        public global::app.Graphql.StringOperationFilterInput? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsDescriptionSet => _set_description;
        public global::app.Graphql.StatusOperationFilterInput? Status
        {
            get => _value_status;
            set
            {
                _set_status = true;
                _value_status = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsStatusSet => _set_status;
        public global::app.Graphql.CompanyFilterInput? Company
        {
            get => _value_company;
            set
            {
                _set_company = true;
                _value_company = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsCompanySet => _set_company;
        public global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? UserProjects
        {
            get => _value_userProjects;
            set
            {
                _set_userProjects = true;
                _value_userProjects = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IProjectFilterInputInfo.IsUserProjectsSet => _set_userProjects;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class StringOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.StringOperationFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IStringOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNcontainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ncontains", FormatNcontains(input.Ncontains)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsStartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startsWith", FormatStartsWith(input.StartsWith)));
            }

            if (inputInfo.IsNstartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nstartsWith", FormatNstartsWith(input.NstartsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsNendsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nendsWith", FormatNendsWith(input.NendsWith)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNcontains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatStartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNstartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNendsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class StringOperationFilterInput : global::app.Graphql.State.IStringOperationFilterInputInfo, global::System.IEquatable<StringOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq)) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((Ncontains is null && other.Ncontains is null) || Ncontains != null && Ncontains.Equals(other.Ncontains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((StartsWith is null && other.StartsWith is null) || StartsWith != null && StartsWith.Equals(other.StartsWith)) && ((NstartsWith is null && other.NstartsWith is null) || NstartsWith != null && NstartsWith.Equals(other.NstartsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((NendsWith is null && other.NendsWith is null) || NendsWith != null && NendsWith.Equals(other.NendsWith));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (Ncontains != null)
                {
                    hash ^= 397 * Ncontains.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (StartsWith != null)
                {
                    hash ^= 397 * StartsWith.GetHashCode();
                }

                if (NstartsWith != null)
                {
                    hash ^= 397 * NstartsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (NendsWith != null)
                {
                    hash ^= 397 * NendsWith.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_ncontains;
        private global::System.Boolean _set_ncontains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.String? _value_startsWith;
        private global::System.Boolean _set_startsWith;
        private global::System.String? _value_nstartsWith;
        private global::System.Boolean _set_nstartsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_nendsWith;
        private global::System.Boolean _set_nendsWith;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.StringOperationFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsOrSet => _set_or;
        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.String? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsContainsSet => _set_contains;
        public global::System.String? Ncontains
        {
            get => _value_ncontains;
            set
            {
                _set_ncontains = true;
                _value_ncontains = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsNcontainsSet => _set_ncontains;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.String? StartsWith
        {
            get => _value_startsWith;
            set
            {
                _set_startsWith = true;
                _value_startsWith = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsStartsWithSet => _set_startsWith;
        public global::System.String? NstartsWith
        {
            get => _value_nstartsWith;
            set
            {
                _set_nstartsWith = true;
                _value_nstartsWith = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsNstartsWithSet => _set_nstartsWith;
        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsEndsWithSet => _set_endsWith;
        public global::System.String? NendsWith
        {
            get => _value_nendsWith;
            set
            {
                _set_nendsWith = true;
                _value_nendsWith = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStringOperationFilterInputInfo.IsNendsWithSet => _set_nendsWith;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class StatusOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _statusFormatter = default !;
        public global::System.String TypeName => "StatusOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _statusFormatter = serializerResolver.GetInputValueFormatter("Status");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.StatusOperationFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IStatusOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::app.Graphql.Status? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _statusFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::app.Graphql.Status? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _statusFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_statusFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_statusFormatter.Format(input_elm));
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class StatusOperationFilterInput : global::app.Graphql.State.IStatusOperationFilterInputInfo, global::System.IEquatable<StatusOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StatusOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StatusOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }

        private global::app.Graphql.Status? _value_eq;
        private global::System.Boolean _set_eq;
        private global::app.Graphql.Status? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? _value_nin;
        private global::System.Boolean _set_nin;
        public global::app.Graphql.Status? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStatusOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::app.Graphql.Status? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStatusOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStatusOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.Status>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IStatusOperationFilterInputInfo.IsNinSet => _set_nin;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CompanyFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _companyFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _statusOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _listFilterInputTypeOfUserFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _listFilterInputTypeOfProjectFilterInputFormatter = default !;
        public global::System.String TypeName => "CompanyFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _companyFilterInputFormatter = serializerResolver.GetInputValueFormatter("CompanyFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _statusOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StatusOperationFilterInput");
            _listFilterInputTypeOfUserFilterInputFormatter = serializerResolver.GetInputValueFormatter("ListFilterInputTypeOfUserFilterInput");
            _listFilterInputTypeOfProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ListFilterInputTypeOfProjectFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.CompanyFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.ICompanyFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsStatusSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("status", FormatStatus(input.Status)));
            }

            if (inputInfo.IsUsersSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("users", FormatUsers(input.Users)));
            }

            if (inputInfo.IsProjectsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projects", FormatProjects(input.Projects)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_companyFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_companyFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStatus(global::app.Graphql.StatusOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _statusOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUsers(global::app.Graphql.ListFilterInputTypeOfUserFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _listFilterInputTypeOfUserFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjects(global::app.Graphql.ListFilterInputTypeOfProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _listFilterInputTypeOfProjectFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CompanyFilterInput : global::app.Graphql.State.ICompanyFilterInputInfo, global::System.IEquatable<CompanyFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CompanyFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(CompanyFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((Users is null && other.Users is null) || Users != null && Users.Equals(other.Users)) && ((Projects is null && other.Projects is null) || Projects != null && Projects.Equals(other.Projects));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (Users != null)
                {
                    hash ^= 397 * Users.GetHashCode();
                }

                if (Projects != null)
                {
                    hash ^= 397 * Projects.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::app.Graphql.StringOperationFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::app.Graphql.StringOperationFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::app.Graphql.StatusOperationFilterInput? _value_status;
        private global::System.Boolean _set_status;
        private global::app.Graphql.ListFilterInputTypeOfUserFilterInput? _value_users;
        private global::System.Boolean _set_users;
        private global::app.Graphql.ListFilterInputTypeOfProjectFilterInput? _value_projects;
        private global::System.Boolean _set_projects;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.CompanyFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsOrSet => _set_or;
        public global::app.Graphql.StringOperationFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsIdSet => _set_id;
        public global::app.Graphql.StringOperationFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsNameSet => _set_name;
        public global::app.Graphql.StatusOperationFilterInput? Status
        {
            get => _value_status;
            set
            {
                _set_status = true;
                _value_status = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsStatusSet => _set_status;
        public global::app.Graphql.ListFilterInputTypeOfUserFilterInput? Users
        {
            get => _value_users;
            set
            {
                _set_users = true;
                _value_users = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsUsersSet => _set_users;
        public global::app.Graphql.ListFilterInputTypeOfProjectFilterInput? Projects
        {
            get => _value_projects;
            set
            {
                _set_projects = true;
                _value_projects = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICompanyFilterInputInfo.IsProjectsSet => _set_projects;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfUserFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _userFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ListFilterInputTypeOfUserFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _userFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserFilterInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ListFilterInputTypeOfUserFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAllSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("all", FormatAll(input.All)));
            }

            if (inputInfo.IsNoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("none", FormatNone(input.None)));
            }

            if (inputInfo.IsSomeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("some", FormatSome(input.Some)));
            }

            if (inputInfo.IsAnySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("any", FormatAny(input.Any)));
            }

            return fields;
        }

        private global::System.Object? FormatAll(global::app.Graphql.UserFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNone(global::app.Graphql.UserFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSome(global::app.Graphql.UserFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAny(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfUserFilterInput : global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo, global::System.IEquatable<ListFilterInputTypeOfUserFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListFilterInputTypeOfUserFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ListFilterInputTypeOfUserFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((All is null && other.All is null) || All != null && All.Equals(other.All))) && ((None is null && other.None is null) || None != null && None.Equals(other.None)) && ((Some is null && other.Some is null) || Some != null && Some.Equals(other.Some)) && Any == other.Any;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (All != null)
                {
                    hash ^= 397 * All.GetHashCode();
                }

                if (None != null)
                {
                    hash ^= 397 * None.GetHashCode();
                }

                if (Some != null)
                {
                    hash ^= 397 * Some.GetHashCode();
                }

                if (Any != null)
                {
                    hash ^= 397 * Any.GetHashCode();
                }

                return hash;
            }
        }

        private global::app.Graphql.UserFilterInput? _value_all;
        private global::System.Boolean _set_all;
        private global::app.Graphql.UserFilterInput? _value_none;
        private global::System.Boolean _set_none;
        private global::app.Graphql.UserFilterInput? _value_some;
        private global::System.Boolean _set_some;
        private global::System.Boolean? _value_any;
        private global::System.Boolean _set_any;
        public global::app.Graphql.UserFilterInput? All
        {
            get => _value_all;
            set
            {
                _set_all = true;
                _value_all = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo.IsAllSet => _set_all;
        public global::app.Graphql.UserFilterInput? None
        {
            get => _value_none;
            set
            {
                _set_none = true;
                _value_none = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo.IsNoneSet => _set_none;
        public global::app.Graphql.UserFilterInput? Some
        {
            get => _value_some;
            set
            {
                _set_some = true;
                _value_some = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo.IsSomeSet => _set_some;
        public global::System.Boolean? Any
        {
            get => _value_any;
            set
            {
                _set_any = true;
                _value_any = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserFilterInputInfo.IsAnySet => _set_any;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _userFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _statusOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _companyFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _listFilterInputTypeOfUserProjectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableNullableOfDateTimeOffsetOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableInt32OperationFilterInputFormatter = default !;
        public global::System.String TypeName => "UserFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _userFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _statusOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StatusOperationFilterInput");
            _companyFilterInputFormatter = serializerResolver.GetInputValueFormatter("CompanyFilterInput");
            _listFilterInputTypeOfUserProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ListFilterInputTypeOfUserProjectFilterInput");
            _booleanOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanOperationFilterInput");
            _comparableNullableOfDateTimeOffsetOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableNullableOfDateTimeOffsetOperationFilterInput");
            _comparableInt32OperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableInt32OperationFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.UserFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IUserFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsCompanyIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("companyId", FormatCompanyId(input.CompanyId)));
            }

            if (inputInfo.IsStatusSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("status", FormatStatus(input.Status)));
            }

            if (inputInfo.IsCompanySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("company", FormatCompany(input.Company)));
            }

            if (inputInfo.IsUserProjectsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userProjects", FormatUserProjects(input.UserProjects)));
            }

            if (inputInfo.IsUserNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userName", FormatUserName(input.UserName)));
            }

            if (inputInfo.IsNormalizedUserNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("normalizedUserName", FormatNormalizedUserName(input.NormalizedUserName)));
            }

            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            if (inputInfo.IsNormalizedEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("normalizedEmail", FormatNormalizedEmail(input.NormalizedEmail)));
            }

            if (inputInfo.IsEmailConfirmedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("emailConfirmed", FormatEmailConfirmed(input.EmailConfirmed)));
            }

            if (inputInfo.IsPasswordHashSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("passwordHash", FormatPasswordHash(input.PasswordHash)));
            }

            if (inputInfo.IsSecurityStampSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("securityStamp", FormatSecurityStamp(input.SecurityStamp)));
            }

            if (inputInfo.IsConcurrencyStampSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("concurrencyStamp", FormatConcurrencyStamp(input.ConcurrencyStamp)));
            }

            if (inputInfo.IsPhoneNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("phoneNumber", FormatPhoneNumber(input.PhoneNumber)));
            }

            if (inputInfo.IsPhoneNumberConfirmedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("phoneNumberConfirmed", FormatPhoneNumberConfirmed(input.PhoneNumberConfirmed)));
            }

            if (inputInfo.IsTwoFactorEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("twoFactorEnabled", FormatTwoFactorEnabled(input.TwoFactorEnabled)));
            }

            if (inputInfo.IsLockoutEndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lockoutEnd", FormatLockoutEnd(input.LockoutEnd)));
            }

            if (inputInfo.IsLockoutEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lockoutEnabled", FormatLockoutEnabled(input.LockoutEnabled)));
            }

            if (inputInfo.IsAccessFailedCountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accessFailedCount", FormatAccessFailedCount(input.AccessFailedCount)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_userFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_userFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCompanyId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStatus(global::app.Graphql.StatusOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _statusOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCompany(global::app.Graphql.CompanyFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _companyFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUserProjects(global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _listFilterInputTypeOfUserProjectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUserName(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNormalizedUserName(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEmail(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNormalizedEmail(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEmailConfirmed(global::app.Graphql.BooleanOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPasswordHash(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSecurityStamp(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatConcurrencyStamp(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPhoneNumber(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPhoneNumberConfirmed(global::app.Graphql.BooleanOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTwoFactorEnabled(global::app.Graphql.BooleanOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLockoutEnd(global::app.Graphql.ComparableNullableOfDateTimeOffsetOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableNullableOfDateTimeOffsetOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLockoutEnabled(global::app.Graphql.BooleanOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAccessFailedCount(global::app.Graphql.ComparableInt32OperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableInt32OperationFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserFilterInput : global::app.Graphql.State.IUserFilterInputInfo, global::System.IEquatable<UserFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(UserFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((CompanyId is null && other.CompanyId is null) || CompanyId != null && CompanyId.Equals(other.CompanyId)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((Company is null && other.Company is null) || Company != null && Company.Equals(other.Company)) && ((UserProjects is null && other.UserProjects is null) || UserProjects != null && UserProjects.Equals(other.UserProjects)) && ((UserName is null && other.UserName is null) || UserName != null && UserName.Equals(other.UserName)) && ((NormalizedUserName is null && other.NormalizedUserName is null) || NormalizedUserName != null && NormalizedUserName.Equals(other.NormalizedUserName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((NormalizedEmail is null && other.NormalizedEmail is null) || NormalizedEmail != null && NormalizedEmail.Equals(other.NormalizedEmail)) && ((EmailConfirmed is null && other.EmailConfirmed is null) || EmailConfirmed != null && EmailConfirmed.Equals(other.EmailConfirmed)) && ((PasswordHash is null && other.PasswordHash is null) || PasswordHash != null && PasswordHash.Equals(other.PasswordHash)) && ((SecurityStamp is null && other.SecurityStamp is null) || SecurityStamp != null && SecurityStamp.Equals(other.SecurityStamp)) && ((ConcurrencyStamp is null && other.ConcurrencyStamp is null) || ConcurrencyStamp != null && ConcurrencyStamp.Equals(other.ConcurrencyStamp)) && ((PhoneNumber is null && other.PhoneNumber is null) || PhoneNumber != null && PhoneNumber.Equals(other.PhoneNumber)) && ((PhoneNumberConfirmed is null && other.PhoneNumberConfirmed is null) || PhoneNumberConfirmed != null && PhoneNumberConfirmed.Equals(other.PhoneNumberConfirmed)) && ((TwoFactorEnabled is null && other.TwoFactorEnabled is null) || TwoFactorEnabled != null && TwoFactorEnabled.Equals(other.TwoFactorEnabled)) && ((LockoutEnd is null && other.LockoutEnd is null) || LockoutEnd != null && LockoutEnd.Equals(other.LockoutEnd)) && ((LockoutEnabled is null && other.LockoutEnabled is null) || LockoutEnabled != null && LockoutEnabled.Equals(other.LockoutEnabled)) && ((AccessFailedCount is null && other.AccessFailedCount is null) || AccessFailedCount != null && AccessFailedCount.Equals(other.AccessFailedCount));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (CompanyId != null)
                {
                    hash ^= 397 * CompanyId.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (Company != null)
                {
                    hash ^= 397 * Company.GetHashCode();
                }

                if (UserProjects != null)
                {
                    hash ^= 397 * UserProjects.GetHashCode();
                }

                if (UserName != null)
                {
                    hash ^= 397 * UserName.GetHashCode();
                }

                if (NormalizedUserName != null)
                {
                    hash ^= 397 * NormalizedUserName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (NormalizedEmail != null)
                {
                    hash ^= 397 * NormalizedEmail.GetHashCode();
                }

                if (EmailConfirmed != null)
                {
                    hash ^= 397 * EmailConfirmed.GetHashCode();
                }

                if (PasswordHash != null)
                {
                    hash ^= 397 * PasswordHash.GetHashCode();
                }

                if (SecurityStamp != null)
                {
                    hash ^= 397 * SecurityStamp.GetHashCode();
                }

                if (ConcurrencyStamp != null)
                {
                    hash ^= 397 * ConcurrencyStamp.GetHashCode();
                }

                if (PhoneNumber != null)
                {
                    hash ^= 397 * PhoneNumber.GetHashCode();
                }

                if (PhoneNumberConfirmed != null)
                {
                    hash ^= 397 * PhoneNumberConfirmed.GetHashCode();
                }

                if (TwoFactorEnabled != null)
                {
                    hash ^= 397 * TwoFactorEnabled.GetHashCode();
                }

                if (LockoutEnd != null)
                {
                    hash ^= 397 * LockoutEnd.GetHashCode();
                }

                if (LockoutEnabled != null)
                {
                    hash ^= 397 * LockoutEnabled.GetHashCode();
                }

                if (AccessFailedCount != null)
                {
                    hash ^= 397 * AccessFailedCount.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::app.Graphql.StringOperationFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::app.Graphql.StringOperationFilterInput? _value_companyId;
        private global::System.Boolean _set_companyId;
        private global::app.Graphql.StatusOperationFilterInput? _value_status;
        private global::System.Boolean _set_status;
        private global::app.Graphql.CompanyFilterInput? _value_company;
        private global::System.Boolean _set_company;
        private global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? _value_userProjects;
        private global::System.Boolean _set_userProjects;
        private global::app.Graphql.StringOperationFilterInput? _value_userName;
        private global::System.Boolean _set_userName;
        private global::app.Graphql.StringOperationFilterInput? _value_normalizedUserName;
        private global::System.Boolean _set_normalizedUserName;
        private global::app.Graphql.StringOperationFilterInput? _value_email;
        private global::System.Boolean _set_email;
        private global::app.Graphql.StringOperationFilterInput? _value_normalizedEmail;
        private global::System.Boolean _set_normalizedEmail;
        private global::app.Graphql.BooleanOperationFilterInput? _value_emailConfirmed;
        private global::System.Boolean _set_emailConfirmed;
        private global::app.Graphql.StringOperationFilterInput? _value_passwordHash;
        private global::System.Boolean _set_passwordHash;
        private global::app.Graphql.StringOperationFilterInput? _value_securityStamp;
        private global::System.Boolean _set_securityStamp;
        private global::app.Graphql.StringOperationFilterInput? _value_concurrencyStamp;
        private global::System.Boolean _set_concurrencyStamp;
        private global::app.Graphql.StringOperationFilterInput? _value_phoneNumber;
        private global::System.Boolean _set_phoneNumber;
        private global::app.Graphql.BooleanOperationFilterInput? _value_phoneNumberConfirmed;
        private global::System.Boolean _set_phoneNumberConfirmed;
        private global::app.Graphql.BooleanOperationFilterInput? _value_twoFactorEnabled;
        private global::System.Boolean _set_twoFactorEnabled;
        private global::app.Graphql.ComparableNullableOfDateTimeOffsetOperationFilterInput? _value_lockoutEnd;
        private global::System.Boolean _set_lockoutEnd;
        private global::app.Graphql.BooleanOperationFilterInput? _value_lockoutEnabled;
        private global::System.Boolean _set_lockoutEnabled;
        private global::app.Graphql.ComparableInt32OperationFilterInput? _value_accessFailedCount;
        private global::System.Boolean _set_accessFailedCount;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsOrSet => _set_or;
        public global::app.Graphql.StringOperationFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsIdSet => _set_id;
        public global::app.Graphql.StringOperationFilterInput? CompanyId
        {
            get => _value_companyId;
            set
            {
                _set_companyId = true;
                _value_companyId = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsCompanyIdSet => _set_companyId;
        public global::app.Graphql.StatusOperationFilterInput? Status
        {
            get => _value_status;
            set
            {
                _set_status = true;
                _value_status = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsStatusSet => _set_status;
        public global::app.Graphql.CompanyFilterInput? Company
        {
            get => _value_company;
            set
            {
                _set_company = true;
                _value_company = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsCompanySet => _set_company;
        public global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput? UserProjects
        {
            get => _value_userProjects;
            set
            {
                _set_userProjects = true;
                _value_userProjects = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsUserProjectsSet => _set_userProjects;
        public global::app.Graphql.StringOperationFilterInput? UserName
        {
            get => _value_userName;
            set
            {
                _set_userName = true;
                _value_userName = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsUserNameSet => _set_userName;
        public global::app.Graphql.StringOperationFilterInput? NormalizedUserName
        {
            get => _value_normalizedUserName;
            set
            {
                _set_normalizedUserName = true;
                _value_normalizedUserName = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsNormalizedUserNameSet => _set_normalizedUserName;
        public global::app.Graphql.StringOperationFilterInput? Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsEmailSet => _set_email;
        public global::app.Graphql.StringOperationFilterInput? NormalizedEmail
        {
            get => _value_normalizedEmail;
            set
            {
                _set_normalizedEmail = true;
                _value_normalizedEmail = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsNormalizedEmailSet => _set_normalizedEmail;
        public global::app.Graphql.BooleanOperationFilterInput? EmailConfirmed
        {
            get => _value_emailConfirmed;
            set
            {
                _set_emailConfirmed = true;
                _value_emailConfirmed = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsEmailConfirmedSet => _set_emailConfirmed;
        public global::app.Graphql.StringOperationFilterInput? PasswordHash
        {
            get => _value_passwordHash;
            set
            {
                _set_passwordHash = true;
                _value_passwordHash = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsPasswordHashSet => _set_passwordHash;
        public global::app.Graphql.StringOperationFilterInput? SecurityStamp
        {
            get => _value_securityStamp;
            set
            {
                _set_securityStamp = true;
                _value_securityStamp = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsSecurityStampSet => _set_securityStamp;
        public global::app.Graphql.StringOperationFilterInput? ConcurrencyStamp
        {
            get => _value_concurrencyStamp;
            set
            {
                _set_concurrencyStamp = true;
                _value_concurrencyStamp = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsConcurrencyStampSet => _set_concurrencyStamp;
        public global::app.Graphql.StringOperationFilterInput? PhoneNumber
        {
            get => _value_phoneNumber;
            set
            {
                _set_phoneNumber = true;
                _value_phoneNumber = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsPhoneNumberSet => _set_phoneNumber;
        public global::app.Graphql.BooleanOperationFilterInput? PhoneNumberConfirmed
        {
            get => _value_phoneNumberConfirmed;
            set
            {
                _set_phoneNumberConfirmed = true;
                _value_phoneNumberConfirmed = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsPhoneNumberConfirmedSet => _set_phoneNumberConfirmed;
        public global::app.Graphql.BooleanOperationFilterInput? TwoFactorEnabled
        {
            get => _value_twoFactorEnabled;
            set
            {
                _set_twoFactorEnabled = true;
                _value_twoFactorEnabled = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsTwoFactorEnabledSet => _set_twoFactorEnabled;
        public global::app.Graphql.ComparableNullableOfDateTimeOffsetOperationFilterInput? LockoutEnd
        {
            get => _value_lockoutEnd;
            set
            {
                _set_lockoutEnd = true;
                _value_lockoutEnd = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsLockoutEndSet => _set_lockoutEnd;
        public global::app.Graphql.BooleanOperationFilterInput? LockoutEnabled
        {
            get => _value_lockoutEnabled;
            set
            {
                _set_lockoutEnabled = true;
                _value_lockoutEnabled = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsLockoutEnabledSet => _set_lockoutEnabled;
        public global::app.Graphql.ComparableInt32OperationFilterInput? AccessFailedCount
        {
            get => _value_accessFailedCount;
            set
            {
                _set_accessFailedCount = true;
                _value_accessFailedCount = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserFilterInputInfo.IsAccessFailedCountSet => _set_accessFailedCount;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfUserProjectFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _userProjectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ListFilterInputTypeOfUserProjectFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _userProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserProjectFilterInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAllSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("all", FormatAll(input.All)));
            }

            if (inputInfo.IsNoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("none", FormatNone(input.None)));
            }

            if (inputInfo.IsSomeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("some", FormatSome(input.Some)));
            }

            if (inputInfo.IsAnySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("any", FormatAny(input.Any)));
            }

            return fields;
        }

        private global::System.Object? FormatAll(global::app.Graphql.UserProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userProjectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNone(global::app.Graphql.UserProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userProjectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSome(global::app.Graphql.UserProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userProjectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAny(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfUserProjectFilterInput : global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo, global::System.IEquatable<ListFilterInputTypeOfUserProjectFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListFilterInputTypeOfUserProjectFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ListFilterInputTypeOfUserProjectFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((All is null && other.All is null) || All != null && All.Equals(other.All))) && ((None is null && other.None is null) || None != null && None.Equals(other.None)) && ((Some is null && other.Some is null) || Some != null && Some.Equals(other.Some)) && Any == other.Any;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (All != null)
                {
                    hash ^= 397 * All.GetHashCode();
                }

                if (None != null)
                {
                    hash ^= 397 * None.GetHashCode();
                }

                if (Some != null)
                {
                    hash ^= 397 * Some.GetHashCode();
                }

                if (Any != null)
                {
                    hash ^= 397 * Any.GetHashCode();
                }

                return hash;
            }
        }

        private global::app.Graphql.UserProjectFilterInput? _value_all;
        private global::System.Boolean _set_all;
        private global::app.Graphql.UserProjectFilterInput? _value_none;
        private global::System.Boolean _set_none;
        private global::app.Graphql.UserProjectFilterInput? _value_some;
        private global::System.Boolean _set_some;
        private global::System.Boolean? _value_any;
        private global::System.Boolean _set_any;
        public global::app.Graphql.UserProjectFilterInput? All
        {
            get => _value_all;
            set
            {
                _set_all = true;
                _value_all = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo.IsAllSet => _set_all;
        public global::app.Graphql.UserProjectFilterInput? None
        {
            get => _value_none;
            set
            {
                _set_none = true;
                _value_none = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo.IsNoneSet => _set_none;
        public global::app.Graphql.UserProjectFilterInput? Some
        {
            get => _value_some;
            set
            {
                _set_some = true;
                _value_some = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo.IsSomeSet => _set_some;
        public global::System.Boolean? Any
        {
            get => _value_any;
            set
            {
                _set_any = true;
                _value_any = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfUserProjectFilterInputInfo.IsAnySet => _set_any;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserProjectFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _userProjectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _projectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _userFilterInputFormatter = default !;
        public global::System.String TypeName => "UserProjectFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _userProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserProjectFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _projectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ProjectFilterInput");
            _userFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.UserProjectFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IUserProjectFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsUserIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userId", FormatUserId(input.UserId)));
            }

            if (inputInfo.IsProjectIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectId", FormatProjectId(input.ProjectId)));
            }

            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            if (inputInfo.IsUserSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("user", FormatUser(input.User)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_userProjectFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_userProjectFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUserId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectId(global::app.Graphql.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProject(global::app.Graphql.ProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _projectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUser(global::app.Graphql.UserFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _userFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserProjectFilterInput : global::app.Graphql.State.IUserProjectFilterInputInfo, global::System.IEquatable<UserProjectFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserProjectFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(UserProjectFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((UserId is null && other.UserId is null) || UserId != null && UserId.Equals(other.UserId)) && ((ProjectId is null && other.ProjectId is null) || ProjectId != null && ProjectId.Equals(other.ProjectId)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (UserId != null)
                {
                    hash ^= 397 * UserId.GetHashCode();
                }

                if (ProjectId != null)
                {
                    hash ^= 397 * ProjectId.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::app.Graphql.StringOperationFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::app.Graphql.StringOperationFilterInput? _value_userId;
        private global::System.Boolean _set_userId;
        private global::app.Graphql.StringOperationFilterInput? _value_projectId;
        private global::System.Boolean _set_projectId;
        private global::app.Graphql.ProjectFilterInput? _value_project;
        private global::System.Boolean _set_project;
        private global::app.Graphql.UserFilterInput? _value_user;
        private global::System.Boolean _set_user;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.UserProjectFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsOrSet => _set_or;
        public global::app.Graphql.StringOperationFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsIdSet => _set_id;
        public global::app.Graphql.StringOperationFilterInput? UserId
        {
            get => _value_userId;
            set
            {
                _set_userId = true;
                _value_userId = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsUserIdSet => _set_userId;
        public global::app.Graphql.StringOperationFilterInput? ProjectId
        {
            get => _value_projectId;
            set
            {
                _set_projectId = true;
                _value_projectId = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsProjectIdSet => _set_projectId;
        public global::app.Graphql.ProjectFilterInput? Project
        {
            get => _value_project;
            set
            {
                _set_project = true;
                _value_project = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsProjectSet => _set_project;
        public global::app.Graphql.UserFilterInput? User
        {
            get => _value_user;
            set
            {
                _set_user = true;
                _value_user = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IUserProjectFilterInputInfo.IsUserSet => _set_user;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class BooleanOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "BooleanOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.BooleanOperationFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IBooleanOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class BooleanOperationFilterInput : global::app.Graphql.State.IBooleanOperationFilterInputInfo, global::System.IEquatable<BooleanOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((BooleanOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(BooleanOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Neq == other.Neq;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Boolean? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Boolean? _value_neq;
        private global::System.Boolean _set_neq;
        public global::System.Boolean? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IBooleanOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.Boolean? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IBooleanOperationFilterInputInfo.IsNeqSet => _set_neq;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ComparableNullableOfDateTimeOffsetOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        public global::System.String TypeName => "ComparableNullableOfDateTimeOffsetOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ComparableNullableOfDateTimeOffsetOperationFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_dateTimeFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_dateTimeFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ComparableNullableOfDateTimeOffsetOperationFilterInput : global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo, global::System.IEquatable<ComparableNullableOfDateTimeOffsetOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableNullableOfDateTimeOffsetOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableNullableOfDateTimeOffsetOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((Gt is null && other.Gt is null) || Gt != null && Gt.Equals(other.Gt)) && ((Ngt is null && other.Ngt is null) || Ngt != null && Ngt.Equals(other.Ngt)) && ((Gte is null && other.Gte is null) || Gte != null && Gte.Equals(other.Gte)) && ((Ngte is null && other.Ngte is null) || Ngte != null && Ngte.Equals(other.Ngte)) && ((Lt is null && other.Lt is null) || Lt != null && Lt.Equals(other.Lt)) && ((Nlt is null && other.Nlt is null) || Nlt != null && Nlt.Equals(other.Nlt)) && ((Lte is null && other.Lte is null) || Lte != null && Lte.Equals(other.Lte)) && ((Nlte is null && other.Nlte is null) || Nlte != null && Nlte.Equals(other.Nlte));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.DateTimeOffset? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.DateTimeOffset? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.DateTimeOffset? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.DateTimeOffset? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.DateTimeOffset? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.DateTimeOffset? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.DateTimeOffset? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.DateTimeOffset? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.DateTimeOffset? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.DateTimeOffset? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.DateTimeOffset? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.DateTimeOffset? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.DateTimeOffset?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.DateTimeOffset? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsGtSet => _set_gt;
        public global::System.DateTimeOffset? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNgtSet => _set_ngt;
        public global::System.DateTimeOffset? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsGteSet => _set_gte;
        public global::System.DateTimeOffset? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNgteSet => _set_ngte;
        public global::System.DateTimeOffset? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsLtSet => _set_lt;
        public global::System.DateTimeOffset? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNltSet => _set_nlt;
        public global::System.DateTimeOffset? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsLteSet => _set_lte;
        public global::System.DateTimeOffset? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableNullableOfDateTimeOffsetOperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ComparableInt32OperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "ComparableInt32OperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ComparableInt32OperationFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IComparableInt32OperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ComparableInt32OperationFilterInput : global::app.Graphql.State.IComparableInt32OperationFilterInputInfo, global::System.IEquatable<ComparableInt32OperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableInt32OperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableInt32OperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Neq == other.Neq && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && Gt == other.Gt && Ngt == other.Ngt && Gte == other.Gte && Ngte == other.Ngte && Lt == other.Lt && Nlt == other.Nlt && Lte == other.Lte && Nlte == other.Nlte;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Int32? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.Int32? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Int32? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.Int32? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.Int32? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.Int32? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.Int32? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.Int32? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.Int32? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.Int32? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.Int32? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.Int32? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsGtSet => _set_gt;
        public global::System.Int32? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNgtSet => _set_ngt;
        public global::System.Int32? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsGteSet => _set_gte;
        public global::System.Int32? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNgteSet => _set_ngte;
        public global::System.Int32? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsLtSet => _set_lt;
        public global::System.Int32? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNltSet => _set_nlt;
        public global::System.Int32? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsLteSet => _set_lte;
        public global::System.Int32? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IComparableInt32OperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfProjectFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _projectFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ListFilterInputTypeOfProjectFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _projectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ProjectFilterInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.ListFilterInputTypeOfProjectFilterInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAllSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("all", FormatAll(input.All)));
            }

            if (inputInfo.IsNoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("none", FormatNone(input.None)));
            }

            if (inputInfo.IsSomeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("some", FormatSome(input.Some)));
            }

            if (inputInfo.IsAnySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("any", FormatAny(input.Any)));
            }

            return fields;
        }

        private global::System.Object? FormatAll(global::app.Graphql.ProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _projectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNone(global::app.Graphql.ProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _projectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSome(global::app.Graphql.ProjectFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _projectFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAny(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ListFilterInputTypeOfProjectFilterInput : global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo, global::System.IEquatable<ListFilterInputTypeOfProjectFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListFilterInputTypeOfProjectFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ListFilterInputTypeOfProjectFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((All is null && other.All is null) || All != null && All.Equals(other.All))) && ((None is null && other.None is null) || None != null && None.Equals(other.None)) && ((Some is null && other.Some is null) || Some != null && Some.Equals(other.Some)) && Any == other.Any;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (All != null)
                {
                    hash ^= 397 * All.GetHashCode();
                }

                if (None != null)
                {
                    hash ^= 397 * None.GetHashCode();
                }

                if (Some != null)
                {
                    hash ^= 397 * Some.GetHashCode();
                }

                if (Any != null)
                {
                    hash ^= 397 * Any.GetHashCode();
                }

                return hash;
            }
        }

        private global::app.Graphql.ProjectFilterInput? _value_all;
        private global::System.Boolean _set_all;
        private global::app.Graphql.ProjectFilterInput? _value_none;
        private global::System.Boolean _set_none;
        private global::app.Graphql.ProjectFilterInput? _value_some;
        private global::System.Boolean _set_some;
        private global::System.Boolean? _value_any;
        private global::System.Boolean _set_any;
        public global::app.Graphql.ProjectFilterInput? All
        {
            get => _value_all;
            set
            {
                _set_all = true;
                _value_all = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo.IsAllSet => _set_all;
        public global::app.Graphql.ProjectFilterInput? None
        {
            get => _value_none;
            set
            {
                _set_none = true;
                _value_none = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo.IsNoneSet => _set_none;
        public global::app.Graphql.ProjectFilterInput? Some
        {
            get => _value_some;
            set
            {
                _set_some = true;
                _value_some = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo.IsSomeSet => _set_some;
        public global::System.Boolean? Any
        {
            get => _value_any;
            set
            {
                _set_any = true;
                _value_any = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.IListFilterInputTypeOfProjectFilterInputInfo.IsAnySet => _set_any;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserVmInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "CreateUserVmInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::app.Graphql.CreateUserVmInput;
            var inputInfo = runtimeValue as global::app.Graphql.State.ICreateUserVmInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            return fields;
        }

        private global::System.Object? FormatEmail(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserVmInput : global::app.Graphql.State.ICreateUserVmInputInfo, global::System.IEquatable<CreateUserVmInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUserVmInput)obj);
        }

        public virtual global::System.Boolean Equals(CreateUserVmInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Email.Equals(other.Email));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Email.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_email = default !;
        private global::System.Boolean _set_email;
        public global::System.String Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::app.Graphql.State.ICreateUserVmInputInfo.IsEmailSet => _set_email;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public enum Status
    {
        Inactive,
        Active,
        Complete
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class StatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Status>
    {
        public global::System.String TypeName => "Status";
        public Status Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "INACTIVE" => Status.Inactive, "ACTIVE" => Status.Active, "COMPLETE" => Status.Complete, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            Status.Inactive => "INACTIVE", Status.Active => "ACTIVE", Status.Complete => "COMPLETE", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    /// <summary>
    /// Represents the operation service of the Login GraphQL operation
    /// <code>
    /// mutation Login($model: LoginModelInput) {
    ///   account {
    ///     __typename
    ///     login(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginMutationDocument : global::StrawberryShake.IDocument
    {
        private LoginMutationDocument()
        {
        }

        public static LoginMutationDocument Instance { get; } = new LoginMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b608660a5770bd8ca53c27064f0dc44d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Login GraphQL operation
    /// <code>
    /// mutation Login($model: LoginModelInput) {
    ///   account {
    ///     __typename
    ///     login(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginMutation : global::app.Graphql.ILoginMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ILoginResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _loginModelInputFormatter;
        public LoginMutation(global::StrawberryShake.IOperationExecutor<ILoginResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _loginModelInputFormatter = serializerResolver.GetInputValueFormatter("LoginModelInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ILoginResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginResult>> ExecuteAsync(global::app.Graphql.LoginModelInput? model, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(model);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginResult>> Watch(global::app.Graphql.LoginModelInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(model);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::app.Graphql.LoginModelInput? model)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("model", FormatModel(model));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: LoginMutationDocument.Instance.Hash.Value, name: "Login", document: LoginMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModel(global::app.Graphql.LoginModelInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _loginModelInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Login GraphQL operation
    /// <code>
    /// mutation Login($model: LoginModelInput) {
    ///   account {
    ///     __typename
    ///     login(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ILoginMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginResult>> ExecuteAsync(global::app.Graphql.LoginModelInput? model, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginResult>> Watch(global::app.Graphql.LoginModelInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the Register GraphQL operation
    /// <code>
    /// mutation Register($model: RegisterModelInput) {
    ///   account {
    ///     __typename
    ///     register(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterMutationDocument : global::StrawberryShake.IDocument
    {
        private RegisterMutationDocument()
        {
        }

        public static RegisterMutationDocument Instance { get; } = new RegisterMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "003441ab205e7f8f021ad4af3db64538");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Register GraphQL operation
    /// <code>
    /// mutation Register($model: RegisterModelInput) {
    ///   account {
    ///     __typename
    ///     register(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterMutation : global::app.Graphql.IRegisterMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRegisterResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _registerModelInputFormatter;
        public RegisterMutation(global::StrawberryShake.IOperationExecutor<IRegisterResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _registerModelInputFormatter = serializerResolver.GetInputValueFormatter("RegisterModelInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRegisterResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterResult>> ExecuteAsync(global::app.Graphql.RegisterModelInput? model, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(model);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterResult>> Watch(global::app.Graphql.RegisterModelInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(model);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::app.Graphql.RegisterModelInput? model)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("model", FormatModel(model));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RegisterMutationDocument.Instance.Hash.Value, name: "Register", document: RegisterMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModel(global::app.Graphql.RegisterModelInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _registerModelInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Register GraphQL operation
    /// <code>
    /// mutation Register($model: RegisterModelInput) {
    ///   account {
    ///     __typename
    ///     register(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRegisterMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterResult>> ExecuteAsync(global::app.Graphql.RegisterModelInput? model, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterResult>> Watch(global::app.Graphql.RegisterModelInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken {
    ///   account {
    ///     __typename
    ///     refreshToken
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutationDocument : global::StrawberryShake.IDocument
    {
        private RefreshTokenMutationDocument()
        {
        }

        public static RefreshTokenMutationDocument Instance { get; } = new RefreshTokenMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "083faf1597469fcd7bd8a9d9c16e72f6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken {
    ///   account {
    ///     __typename
    ///     refreshToken
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenMutation : global::app.Graphql.IRefreshTokenMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> _operationExecutor;
        public RefreshTokenMutation(global::StrawberryShake.IOperationExecutor<IRefreshTokenResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRefreshTokenResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RefreshTokenMutationDocument.Instance.Hash.Value, name: "RefreshToken", document: RefreshTokenMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the RefreshToken GraphQL operation
    /// <code>
    /// mutation RefreshToken {
    ///   account {
    ///     __typename
    ///     refreshToken
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRefreshTokenMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRefreshTokenResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateProject GraphQL operation
    /// <code>
    /// mutation CreateProject($model: CreateProjectVmInput) {
    ///   project {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateProjectMutationDocument()
        {
        }

        public static CreateProjectMutationDocument Instance { get; } = new CreateProjectMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b885b52eb7f0e3f8de9d666249422f95");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProject GraphQL operation
    /// <code>
    /// mutation CreateProject($model: CreateProjectVmInput) {
    ///   project {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectMutation : global::app.Graphql.ICreateProjectMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateProjectResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createProjectVmInputFormatter;
        public CreateProjectMutation(global::StrawberryShake.IOperationExecutor<ICreateProjectResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createProjectVmInputFormatter = serializerResolver.GetInputValueFormatter("CreateProjectVmInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateProjectResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateProjectResult>> ExecuteAsync(global::app.Graphql.CreateProjectVmInput? model, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(model);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateProjectResult>> Watch(global::app.Graphql.CreateProjectVmInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(model);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::app.Graphql.CreateProjectVmInput? model)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("model", FormatModel(model));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateProjectMutationDocument.Instance.Hash.Value, name: "CreateProject", document: CreateProjectMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModel(global::app.Graphql.CreateProjectVmInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _createProjectVmInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProject GraphQL operation
    /// <code>
    /// mutation CreateProject($model: CreateProjectVmInput) {
    ///   project {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateProjectMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateProjectResult>> ExecuteAsync(global::app.Graphql.CreateProjectVmInput? model, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateProjectResult>> Watch(global::app.Graphql.CreateProjectVmInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($takeFirst: Int, $taskPrevious: Int, $after: String, $before: String, $filter: ProjectFilterInput) {
    ///   Projects(first: $takeFirst, last: $taskPrevious, after: $after, before: $before, where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       description
    ///       id
    ///       companyId
    ///       status
    ///       title
    ///       userProjects {
    ///         __typename
    ///         userId
    ///         user {
    ///           __typename
    ///           userName
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on UserProject {
    ///           id
    ///         }
    ///       }
    ///       users {
    ///         __typename
    ///         userName
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProjectsQueryDocument()
        {
        }

        public static GetProjectsQueryDocument Instance { get; } = new GetProjectsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e2ca19bfd566beb11df5fad10e02a1e4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($takeFirst: Int, $taskPrevious: Int, $after: String, $before: String, $filter: ProjectFilterInput) {
    ///   Projects(first: $takeFirst, last: $taskPrevious, after: $after, before: $before, where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       description
    ///       id
    ///       companyId
    ///       status
    ///       title
    ///       userProjects {
    ///         __typename
    ///         userId
    ///         user {
    ///           __typename
    ///           userName
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on UserProject {
    ///           id
    ///         }
    ///       }
    ///       users {
    ///         __typename
    ///         userName
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsQuery : global::app.Graphql.IGetProjectsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProjectsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _projectFilterInputFormatter;
        public GetProjectsQuery(global::StrawberryShake.IOperationExecutor<IGetProjectsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _projectFilterInputFormatter = serializerResolver.GetInputValueFormatter("ProjectFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProjectsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Int32? takeFirst, global::System.Int32? taskPrevious, global::System.String? after, global::System.String? before, global::app.Graphql.ProjectFilterInput? filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(takeFirst, taskPrevious, after, before, filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::System.Int32? takeFirst, global::System.Int32? taskPrevious, global::System.String? after, global::System.String? before, global::app.Graphql.ProjectFilterInput? filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(takeFirst, taskPrevious, after, before, filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? takeFirst, global::System.Int32? taskPrevious, global::System.String? after, global::System.String? before, global::app.Graphql.ProjectFilterInput? filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("takeFirst", FormatTakeFirst(takeFirst));
            variables.Add("taskPrevious", FormatTaskPrevious(taskPrevious));
            variables.Add("after", FormatAfter(after));
            variables.Add("before", FormatBefore(before));
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProjectsQueryDocument.Instance.Hash.Value, name: "GetProjects", document: GetProjectsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTakeFirst(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatTaskPrevious(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAfter(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBefore(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilter(global::app.Graphql.ProjectFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _projectFilterInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($takeFirst: Int, $taskPrevious: Int, $after: String, $before: String, $filter: ProjectFilterInput) {
    ///   Projects(first: $takeFirst, last: $taskPrevious, after: $after, before: $before, where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       description
    ///       id
    ///       companyId
    ///       status
    ///       title
    ///       userProjects {
    ///         __typename
    ///         userId
    ///         user {
    ///           __typename
    ///           userName
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         ... on UserProject {
    ///           id
    ///         }
    ///       }
    ///       users {
    ///         __typename
    ///         userName
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetProjectsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Int32? takeFirst, global::System.Int32? taskPrevious, global::System.String? after, global::System.String? before, global::app.Graphql.ProjectFilterInput? filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::System.Int32? takeFirst, global::System.Int32? taskPrevious, global::System.String? after, global::System.String? before, global::app.Graphql.ProjectFilterInput? filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddUserInProject GraphQL operation
    /// <code>
    /// mutation AddUserInProject($projectId: String, $model: String) {
    ///   project {
    ///     __typename
    ///     addUser(projectId: $projectId, model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectMutationDocument : global::StrawberryShake.IDocument
    {
        private AddUserInProjectMutationDocument()
        {
        }

        public static AddUserInProjectMutationDocument Instance { get; } = new AddUserInProjectMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4220fdc4c7d04c61691c4ef866a36e62");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddUserInProject GraphQL operation
    /// <code>
    /// mutation AddUserInProject($projectId: String, $model: String) {
    ///   project {
    ///     __typename
    ///     addUser(projectId: $projectId, model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectMutation : global::app.Graphql.IAddUserInProjectMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddUserInProjectResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddUserInProjectMutation(global::StrawberryShake.IOperationExecutor<IAddUserInProjectResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddUserInProjectResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddUserInProjectResult>> ExecuteAsync(global::System.String? projectId, global::System.String? model, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(projectId, model);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddUserInProjectResult>> Watch(global::System.String? projectId, global::System.String? model, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(projectId, model);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? projectId, global::System.String? model)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("projectId", FormatProjectId(projectId));
            variables.Add("model", FormatModel(model));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddUserInProjectMutationDocument.Instance.Hash.Value, name: "AddUserInProject", document: AddUserInProjectMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatProjectId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatModel(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddUserInProject GraphQL operation
    /// <code>
    /// mutation AddUserInProject($projectId: String, $model: String) {
    ///   project {
    ///     __typename
    ///     addUser(projectId: $projectId, model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddUserInProjectMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddUserInProjectResult>> ExecuteAsync(global::System.String? projectId, global::System.String? model, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddUserInProjectResult>> Watch(global::System.String? projectId, global::System.String? model, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCompany GraphQL operation
    /// <code>
    /// query GetCompany {
    ///   Companies {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Company {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCompanyQueryDocument()
        {
        }

        public static GetCompanyQueryDocument Instance { get; } = new GetCompanyQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x7b, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3562551688f11b2ff1613a193440f4c8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCompany GraphQL operation
    /// <code>
    /// query GetCompany {
    ///   Companies {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Company {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyQuery : global::app.Graphql.IGetCompanyQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCompanyResult> _operationExecutor;
        public GetCompanyQuery(global::StrawberryShake.IOperationExecutor<IGetCompanyResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCompanyResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCompanyResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCompanyResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCompanyQueryDocument.Instance.Hash.Value, name: "GetCompany", document: GetCompanyQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCompany GraphQL operation
    /// <code>
    /// query GetCompany {
    ///   Companies {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Company {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetCompanyQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCompanyResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCompanyResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($model: CreateUserVmInput) {
    ///   user {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateUserMutationDocument()
        {
        }

        public static CreateUserMutationDocument Instance { get; } = new CreateUserMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "87c8bbb06dc76c52429fbffa0caefe0d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($model: CreateUserVmInput) {
    ///   user {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserMutation : global::app.Graphql.ICreateUserMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateUserResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createUserVmInputFormatter;
        public CreateUserMutation(global::StrawberryShake.IOperationExecutor<ICreateUserResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createUserVmInputFormatter = serializerResolver.GetInputValueFormatter("CreateUserVmInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateUserResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::app.Graphql.CreateUserVmInput? model, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(model);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::app.Graphql.CreateUserVmInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(model);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::app.Graphql.CreateUserVmInput? model)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("model", FormatModel(model));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateUserMutationDocument.Instance.Hash.Value, name: "CreateUser", document: CreateUserMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModel(global::app.Graphql.CreateUserVmInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _createUserVmInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($model: CreateUserVmInput) {
    ///   user {
    ///     __typename
    ///     add(model: $model)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ICreateUserMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::app.Graphql.CreateUserVmInput? model, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::app.Graphql.CreateUserVmInput? model, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers($filter: UserFilterInput) {
    ///   Users(where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       company {
    ///         __typename
    ///         name
    ///         ... on Company {
    ///           id
    ///         }
    ///       }
    ///       id
    ///       email
    ///       phoneNumber
    ///       status
    ///       userName
    ///       companyId
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersQueryDocument()
        {
        }

        public static GetUsersQueryDocument Instance { get; } = new GetUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8ba7db67b072171991c92c7e1903d7ce");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers($filter: UserFilterInput) {
    ///   Users(where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       company {
    ///         __typename
    ///         name
    ///         ... on Company {
    ///           id
    ///         }
    ///       }
    ///       id
    ///       email
    ///       phoneNumber
    ///       status
    ///       userName
    ///       companyId
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersQuery : global::app.Graphql.IGetUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _userFilterInputFormatter;
        public GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _userFilterInputFormatter = serializerResolver.GetInputValueFormatter("UserFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::app.Graphql.UserFilterInput? filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::app.Graphql.UserFilterInput? filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::app.Graphql.UserFilterInput? filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersQueryDocument.Instance.Hash.Value, name: "GetUsers", document: GetUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::app.Graphql.UserFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _userFilterInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers($filter: UserFilterInput) {
    ///   Users(where: $filter) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       company {
    ///         __typename
    ///         name
    ///         ... on Company {
    ///           id
    ///         }
    ///       }
    ///       id
    ///       email
    ///       phoneNumber
    ///       status
    ///       userName
    ///       companyId
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::app.Graphql.UserFilterInput? filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::app.Graphql.UserFilterInput? filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the TmClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class TmClient : global::app.Graphql.ITmClient
    {
        private readonly global::app.Graphql.ILoginMutation _login;
        private readonly global::app.Graphql.IRegisterMutation _register;
        private readonly global::app.Graphql.IRefreshTokenMutation _refreshToken;
        private readonly global::app.Graphql.ICreateProjectMutation _createProject;
        private readonly global::app.Graphql.IGetProjectsQuery _getProjects;
        private readonly global::app.Graphql.IAddUserInProjectMutation _addUserInProject;
        private readonly global::app.Graphql.IGetCompanyQuery _getCompany;
        private readonly global::app.Graphql.ICreateUserMutation _createUser;
        private readonly global::app.Graphql.IGetUsersQuery _getUsers;
        public TmClient(global::app.Graphql.ILoginMutation login, global::app.Graphql.IRegisterMutation register, global::app.Graphql.IRefreshTokenMutation refreshToken, global::app.Graphql.ICreateProjectMutation createProject, global::app.Graphql.IGetProjectsQuery getProjects, global::app.Graphql.IAddUserInProjectMutation addUserInProject, global::app.Graphql.IGetCompanyQuery getCompany, global::app.Graphql.ICreateUserMutation createUser, global::app.Graphql.IGetUsersQuery getUsers)
        {
            _login = login ?? throw new global::System.ArgumentNullException(nameof(login));
            _register = register ?? throw new global::System.ArgumentNullException(nameof(register));
            _refreshToken = refreshToken ?? throw new global::System.ArgumentNullException(nameof(refreshToken));
            _createProject = createProject ?? throw new global::System.ArgumentNullException(nameof(createProject));
            _getProjects = getProjects ?? throw new global::System.ArgumentNullException(nameof(getProjects));
            _addUserInProject = addUserInProject ?? throw new global::System.ArgumentNullException(nameof(addUserInProject));
            _getCompany = getCompany ?? throw new global::System.ArgumentNullException(nameof(getCompany));
            _createUser = createUser ?? throw new global::System.ArgumentNullException(nameof(createUser));
            _getUsers = getUsers ?? throw new global::System.ArgumentNullException(nameof(getUsers));
        }

        public static global::System.String ClientName => "TmClient";
        public global::app.Graphql.ILoginMutation Login => _login;
        public global::app.Graphql.IRegisterMutation Register => _register;
        public global::app.Graphql.IRefreshTokenMutation RefreshToken => _refreshToken;
        public global::app.Graphql.ICreateProjectMutation CreateProject => _createProject;
        public global::app.Graphql.IGetProjectsQuery GetProjects => _getProjects;
        public global::app.Graphql.IAddUserInProjectMutation AddUserInProject => _addUserInProject;
        public global::app.Graphql.IGetCompanyQuery GetCompany => _getCompany;
        public global::app.Graphql.ICreateUserMutation CreateUser => _createUser;
        public global::app.Graphql.IGetUsersQuery GetUsers => _getUsers;
    }

    /// <summary>
    /// Represents the TmClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ITmClient
    {
        global::app.Graphql.ILoginMutation Login { get; }

        global::app.Graphql.IRegisterMutation Register { get; }

        global::app.Graphql.IRefreshTokenMutation RefreshToken { get; }

        global::app.Graphql.ICreateProjectMutation CreateProject { get; }

        global::app.Graphql.IGetProjectsQuery GetProjects { get; }

        global::app.Graphql.IAddUserInProjectMutation AddUserInProject { get; }

        global::app.Graphql.IGetCompanyQuery GetCompany { get; }

        global::app.Graphql.ICreateUserMutation CreateUser { get; }

        global::app.Graphql.IGetUsersQuery GetUsers { get; }
    }
}

namespace app.Graphql.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ProjectEntity
    {
        public ProjectEntity(global::System.String? description = default !, global::System.String? id = default !, global::System.String? companyId = default !, global::app.Graphql.Status status = default !, global::System.String? title = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? userProjects = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? users = default !)
        {
            Description = description;
            Id = id;
            CompanyId = companyId;
            Status = status;
            Title = title;
            UserProjects = userProjects;
            Users = users;
        }

        public global::System.String? Description { get; }

        public global::System.String? Id { get; }

        public global::System.String? CompanyId { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? Title { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UserProjects { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserProjectEntity
    {
        public UserProjectEntity(global::System.String? userId = default !, global::StrawberryShake.EntityId? user = default !)
        {
            UserId = userId;
            User = user;
        }

        public global::System.String? UserId { get; }

        public global::StrawberryShake.EntityId? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.String? userName = default !, global::StrawberryShake.EntityId? company = default !, global::System.String? id = default !, global::System.String? email = default !, global::System.String? phoneNumber = default !, global::app.Graphql.Status status = default !, global::System.String? companyId = default !)
        {
            UserName = userName;
            Company = company;
            Id = id;
            Email = email;
            PhoneNumber = phoneNumber;
            Status = status;
            CompanyId = companyId;
        }

        public global::System.String? UserName { get; }

        public global::StrawberryShake.EntityId? Company { get; }

        public global::System.String? Id { get; }

        public global::System.String? Email { get; }

        public global::System.String? PhoneNumber { get; }

        public global::app.Graphql.Status Status { get; }

        public global::System.String? CompanyId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CompanyEntity
    {
        public CompanyEntity(global::System.String? id = default !, global::System.String? name = default !, global::app.Graphql.Status status = default !)
        {
            Id = id;
            Name = name;
            Status = status;
        }

        public global::System.String? Id { get; }

        public global::System.String? Name { get; }

        public global::app.Graphql.Status Status { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.LoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public LoginResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.ILoginResult);
        public LoginResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is LoginResultInfo info)
            {
                return new LoginResult(MapILogin_Account(info.Account, snapshot));
            }

            throw new global::System.ArgumentException("LoginResultInfo expected.");
        }

        private global::app.Graphql.ILogin_Account? MapILogin_Account(global::app.Graphql.State.AccountMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ILogin_Account returnValue = default !;
            if (data?.__typename.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new Login_Account_AccountMutationType(data.Login);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public LoginResultInfo(global::app.Graphql.State.AccountMutationTypeData? account, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Account = account;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.AccountMutationTypeData? Account { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new LoginResultInfo(Account, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.RegisterResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RegisterResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IRegisterResult);
        public RegisterResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RegisterResultInfo info)
            {
                return new RegisterResult(MapIRegister_Account(info.Account, snapshot));
            }

            throw new global::System.ArgumentException("RegisterResultInfo expected.");
        }

        private global::app.Graphql.IRegister_Account? MapIRegister_Account(global::app.Graphql.State.AccountMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRegister_Account returnValue = default !;
            if (data?.__typename.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new Register_Account_AccountMutationType(data.Register);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RegisterResultInfo(global::app.Graphql.State.AccountMutationTypeData? account, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Account = account;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.AccountMutationTypeData? Account { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RegisterResultInfo(Account, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.RefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RefreshTokenResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IRefreshTokenResult);
        public RefreshTokenResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RefreshTokenResultInfo info)
            {
                return new RefreshTokenResult(MapIRefreshToken_Account(info.Account, snapshot));
            }

            throw new global::System.ArgumentException("RefreshTokenResultInfo expected.");
        }

        private global::app.Graphql.IRefreshToken_Account? MapIRefreshToken_Account(global::app.Graphql.State.AccountMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRefreshToken_Account returnValue = default !;
            if (data?.__typename.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RefreshToken_Account_AccountMutationType(data.RefreshToken);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RefreshTokenResultInfo(global::app.Graphql.State.AccountMutationTypeData? account, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Account = account;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.AccountMutationTypeData? Account { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RefreshTokenResultInfo(Account, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.CreateProjectResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateProjectResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.ICreateProjectResult);
        public CreateProjectResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateProjectResultInfo info)
            {
                return new CreateProjectResult(MapICreateProject_Project(info.Project, snapshot));
            }

            throw new global::System.ArgumentException("CreateProjectResultInfo expected.");
        }

        private global::app.Graphql.ICreateProject_Project? MapICreateProject_Project(global::app.Graphql.State.ProjectMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateProject_Project returnValue = default !;
            if (data?.__typename.Equals("ProjectMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateProject_Project_ProjectMutationType(data.Add);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateProjectResultInfo(global::app.Graphql.State.ProjectMutationTypeData? project, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Project = project;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.ProjectMutationTypeData? Project { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateProjectResultInfo(Project, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.GetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.ProjectEntity, GetProjects_Projects_Nodes_Project> _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, GetProjects_Projects_Nodes_UserProjects_UserProject> _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_Users_User> _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper;
        public GetProjectsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.ProjectEntity, GetProjects_Projects_Nodes_Project> getProjects_Projects_Nodes_ProjectFromProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, GetProjects_Projects_Nodes_UserProjects_UserProject> getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_Users_User> getProjects_Projects_Nodes_Users_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper = getProjects_Projects_Nodes_ProjectFromProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectFromProjectEntityMapper));
            _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper = getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper));
            _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper = getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper));
            _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper = getProjects_Projects_Nodes_Users_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_Users_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IGetProjectsResult);
        public GetProjectsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProjectsResultInfo info)
            {
                return new GetProjectsResult(MapIGetProjects_Projects(info.Projects, snapshot));
            }

            throw new global::System.ArgumentException("GetProjectsResultInfo expected.");
        }

        private global::app.Graphql.IGetProjects_Projects? MapIGetProjects_Projects(global::app.Graphql.State.ProjectConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProjects_Projects returnValue = default !;
            if (data?.__typename.Equals("ProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProjects_Projects_ProjectConnection(MapIGetProjects_Projects_NodesArray(data.Nodes, snapshot), MapNonNullableIGetProjects_Projects_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes?>? MapIGetProjects_Projects_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var projects = new global::System.Collections.Generic.List<global::app.Graphql.IGetProjects_Projects_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                projects.Add(MapIGetProjects_Projects_Nodes(child, snapshot));
            }

            return projects;
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes? MapIGetProjects_Projects_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.ProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>? MapIGetProjects_Projects_Nodes_UserProjectsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var userProjects = new global::System.Collections.Generic.List<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                userProjects.Add(MapIGetProjects_Projects_Nodes_UserProjects(child, snapshot));
            }

            return userProjects;
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects? MapIGetProjects_Projects_Nodes_UserProjects(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("UserProject", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? MapIGetProjects_Projects_Nodes_UserProjects_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>? MapIGetProjects_Projects_Nodes_UsersArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                users.Add(MapIGetProjects_Projects_Nodes_Users(child, snapshot));
            }

            return users;
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_Users? MapIGetProjects_Projects_Nodes_Users(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.IGetProjects_Projects_PageInfo MapNonNullableIGetProjects_Projects_PageInfo(global::app.Graphql.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetProjects_Projects_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetProjects_Projects_PageInfo_PageInfo(data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProjectsResultInfo(global::app.Graphql.State.ProjectConnectionData? projects, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Projects = projects;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.ProjectConnectionData? Projects { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProjectsResultInfo(Projects, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.ProjectEntity, GetProjects_Projects_Nodes_Project>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, GetProjects_Projects_Nodes_UserProjects_UserProject> _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_Users_User> _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper;
        public GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, GetProjects_Projects_Nodes_UserProjects_UserProject> getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_Users_User> getProjects_Projects_Nodes_Users_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper = getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper));
            _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper = getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper));
            _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper = getProjects_Projects_Nodes_Users_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_Users_UserFromUserEntityMapper));
        }

        public GetProjects_Projects_Nodes_Project Map(global::app.Graphql.State.ProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_Project(entity.Description, entity.Id, entity.CompanyId, entity.Status, entity.Title, MapIGetProjects_Projects_Nodes_UserProjectsArray(entity.UserProjects, snapshot), MapIGetProjects_Projects_Nodes_UsersArray(entity.Users, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>? MapIGetProjects_Projects_Nodes_UserProjectsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var userProjects = new global::System.Collections.Generic.List<global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                userProjects.Add(MapIGetProjects_Projects_Nodes_UserProjects(child, snapshot));
            }

            return userProjects;
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects? MapIGetProjects_Projects_Nodes_UserProjects(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("UserProject", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? MapIGetProjects_Projects_Nodes_UserProjects_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>? MapIGetProjects_Projects_Nodes_UsersArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::app.Graphql.IGetProjects_Projects_Nodes_Users?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                users.Add(MapIGetProjects_Projects_Nodes_Users(child, snapshot));
            }

            return users;
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_Users? MapIGetProjects_Projects_Nodes_Users(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_Users_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, GetProjects_Projects_Nodes_UserProjects_UserProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper;
        public GetProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User> getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper = getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper));
        }

        public GetProjects_Projects_Nodes_UserProjects_UserProject Map(global::app.Graphql.State.UserProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_UserProjects_UserProject(entity.UserId, MapIGetProjects_Projects_Nodes_UserProjects_User(entity.User, snapshot));
        }

        private global::app.Graphql.IGetProjects_Projects_Nodes_UserProjects_User? MapIGetProjects_Projects_Nodes_UserProjects_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_Users_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_Users_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_Projects_Nodes_Users_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_Projects_Nodes_Users_User Map(global::app.Graphql.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_Users_User(entity.UserName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetProjects_Projects_Nodes_UserProjects_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_Projects_Nodes_UserProjects_User_User Map(global::app.Graphql.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_UserProjects_User_User(entity.UserName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.AddUserInProjectResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddUserInProjectResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IAddUserInProjectResult);
        public AddUserInProjectResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddUserInProjectResultInfo info)
            {
                return new AddUserInProjectResult(MapIAddUserInProject_Project(info.Project, snapshot));
            }

            throw new global::System.ArgumentException("AddUserInProjectResultInfo expected.");
        }

        private global::app.Graphql.IAddUserInProject_Project? MapIAddUserInProject_Project(global::app.Graphql.State.ProjectMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddUserInProject_Project returnValue = default !;
            if (data?.__typename.Equals("ProjectMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddUserInProject_Project_ProjectMutationType(data.AddUser);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddUserInProjectResultInfo(global::app.Graphql.State.ProjectMutationTypeData? project, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Project = project;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.ProjectMutationTypeData? Project { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddUserInProjectResultInfo(Project, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.GetCompanyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetCompany_Companies_Nodes_Company> _getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper;
        public GetCompanyResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetCompany_Companies_Nodes_Company> getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper = getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IGetCompanyResult);
        public GetCompanyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCompanyResultInfo info)
            {
                return new GetCompanyResult(MapIGetCompany_Companies(info.Companies, snapshot));
            }

            throw new global::System.ArgumentException("GetCompanyResultInfo expected.");
        }

        private global::app.Graphql.IGetCompany_Companies? MapIGetCompany_Companies(global::app.Graphql.State.CompanyConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCompany_Companies returnValue = default !;
            if (data?.__typename.Equals("CompanyConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCompany_Companies_CompanyConnection(MapIGetCompany_Companies_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetCompany_Companies_Nodes?>? MapIGetCompany_Companies_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var companys = new global::System.Collections.Generic.List<global::app.Graphql.IGetCompany_Companies_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                companys.Add(MapIGetCompany_Companies_Nodes(child, snapshot));
            }

            return companys;
        }

        private global::app.Graphql.IGetCompany_Companies_Nodes? MapIGetCompany_Companies_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Company", global::System.StringComparison.Ordinal))
            {
                return _getCompany_Companies_Nodes_CompanyFromCompanyEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.CompanyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCompanyResultInfo(global::app.Graphql.State.CompanyConnectionData? companies, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Companies = companies;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.CompanyConnectionData? Companies { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCompanyResultInfo(Companies, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompany_Companies_Nodes_CompanyFromCompanyEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetCompany_Companies_Nodes_Company>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCompany_Companies_Nodes_CompanyFromCompanyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCompany_Companies_Nodes_Company Map(global::app.Graphql.State.CompanyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCompany_Companies_Nodes_Company(entity.Id, entity.Name, entity.Status);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.CreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateUserResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.ICreateUserResult);
        public CreateUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateUserResultInfo info)
            {
                return new CreateUserResult(MapICreateUser_User(info.User, snapshot));
            }

            throw new global::System.ArgumentException("CreateUserResultInfo expected.");
        }

        private global::app.Graphql.ICreateUser_User? MapICreateUser_User(global::app.Graphql.State.UserMutationTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateUser_User returnValue = default !;
            if (data?.__typename.Equals("UserMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateUser_User_UserMutationType(data.Add);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateUserResultInfo(global::app.Graphql.State.UserMutationTypeData? user, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            User = user;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.UserMutationTypeData? User { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateUserResultInfo(User, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.GetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetUsers_Users_Nodes_User> _getUsers_Users_Nodes_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetUsers_Users_Nodes_Company_Company> _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper;
        public GetUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetUsers_Users_Nodes_User> getUsers_Users_Nodes_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetUsers_Users_Nodes_Company_Company> getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_Users_Nodes_UserFromUserEntityMapper = getUsers_Users_Nodes_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_Nodes_UserFromUserEntityMapper));
            _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper = getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::app.Graphql.IGetUsersResult);
        public GetUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersResultInfo info)
            {
                return new GetUsersResult(MapIGetUsers_Users(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersResultInfo expected.");
        }

        private global::app.Graphql.IGetUsers_Users? MapIGetUsers_Users(global::app.Graphql.State.UserConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUsers_Users returnValue = default !;
            if (data?.__typename.Equals("UserConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUsers_Users_UserConnection(MapIGetUsers_Users_NodesArray(data.Nodes, snapshot), MapNonNullableIGetUsers_Users_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::app.Graphql.IGetUsers_Users_Nodes?>? MapIGetUsers_Users_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::app.Graphql.IGetUsers_Users_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                users.Add(MapIGetUsers_Users_Nodes(child, snapshot));
            }

            return users;
        }

        private global::app.Graphql.IGetUsers_Users_Nodes? MapIGetUsers_Users_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_Nodes_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.IGetUsers_Users_Nodes_Company? MapIGetUsers_Users_Nodes_Company(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Company", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.CompanyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.IGetUsers_Users_PageInfo MapNonNullableIGetUsers_Users_PageInfo(global::app.Graphql.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetUsers_Users_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetUsers_Users_PageInfo_PageInfo(data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersResultInfo(global::app.Graphql.State.UserConnectionData? users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::app.Graphql.State.UserConnectionData? Users { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_Nodes_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, GetUsers_Users_Nodes_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetUsers_Users_Nodes_Company_Company> _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper;
        public GetUsers_Users_Nodes_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetUsers_Users_Nodes_Company_Company> getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper = getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper));
        }

        public GetUsers_Users_Nodes_User Map(global::app.Graphql.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_Users_Nodes_User(MapIGetUsers_Users_Nodes_Company(entity.Company, snapshot), entity.Id, entity.Email, entity.PhoneNumber, entity.Status, entity.UserName, entity.CompanyId);
        }

        private global::app.Graphql.IGetUsers_Users_Nodes_Company? MapIGetUsers_Users_Nodes_Company(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Company", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper.Map(snapshot.GetEntity<global::app.Graphql.State.CompanyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper : global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, GetUsers_Users_Nodes_Company_Company>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUsers_Users_Nodes_Company_Company Map(global::app.Graphql.State.CompanyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_Users_Nodes_Company_Company(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ILoginModelInputInfo
    {
        global::System.Boolean IsUsernameSet { get; }

        global::System.Boolean IsPasswordSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IRegisterModelInputInfo
    {
        global::System.Boolean IsCompanyNameSet { get; }

        global::System.Boolean IsEmailSet { get; }

        global::System.Boolean IsPasswordConfirmationSet { get; }

        global::System.Boolean IsUsernameSet { get; }

        global::System.Boolean IsPasswordSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ICreateProjectVmInputInfo
    {
        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsDescriptionSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IProjectFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsCompanyIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsStatusSet { get; }

        global::System.Boolean IsCompanySet { get; }

        global::System.Boolean IsUserProjectsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IStringOperationFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsContainsSet { get; }

        global::System.Boolean IsNcontainsSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsStartsWithSet { get; }

        global::System.Boolean IsNstartsWithSet { get; }

        global::System.Boolean IsEndsWithSet { get; }

        global::System.Boolean IsNendsWithSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IStatusOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ICompanyFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsStatusSet { get; }

        global::System.Boolean IsUsersSet { get; }

        global::System.Boolean IsProjectsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IListFilterInputTypeOfUserFilterInputInfo
    {
        global::System.Boolean IsAllSet { get; }

        global::System.Boolean IsNoneSet { get; }

        global::System.Boolean IsSomeSet { get; }

        global::System.Boolean IsAnySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IUserFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsCompanyIdSet { get; }

        global::System.Boolean IsStatusSet { get; }

        global::System.Boolean IsCompanySet { get; }

        global::System.Boolean IsUserProjectsSet { get; }

        global::System.Boolean IsUserNameSet { get; }

        global::System.Boolean IsNormalizedUserNameSet { get; }

        global::System.Boolean IsEmailSet { get; }

        global::System.Boolean IsNormalizedEmailSet { get; }

        global::System.Boolean IsEmailConfirmedSet { get; }

        global::System.Boolean IsPasswordHashSet { get; }

        global::System.Boolean IsSecurityStampSet { get; }

        global::System.Boolean IsConcurrencyStampSet { get; }

        global::System.Boolean IsPhoneNumberSet { get; }

        global::System.Boolean IsPhoneNumberConfirmedSet { get; }

        global::System.Boolean IsTwoFactorEnabledSet { get; }

        global::System.Boolean IsLockoutEndSet { get; }

        global::System.Boolean IsLockoutEnabledSet { get; }

        global::System.Boolean IsAccessFailedCountSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IListFilterInputTypeOfUserProjectFilterInputInfo
    {
        global::System.Boolean IsAllSet { get; }

        global::System.Boolean IsNoneSet { get; }

        global::System.Boolean IsSomeSet { get; }

        global::System.Boolean IsAnySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IUserProjectFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsUserIdSet { get; }

        global::System.Boolean IsProjectIdSet { get; }

        global::System.Boolean IsProjectSet { get; }

        global::System.Boolean IsUserSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IBooleanOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IComparableNullableOfDateTimeOffsetOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IComparableInt32OperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IListFilterInputTypeOfProjectFilterInputInfo
    {
        global::System.Boolean IsAllSet { get; }

        global::System.Boolean IsNoneSet { get; }

        global::System.Boolean IsSomeSet { get; }

        global::System.Boolean IsAnySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ICreateUserVmInputInfo
    {
        global::System.Boolean IsEmailSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LoginBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ILoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ILoginResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public LoginBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ILoginResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ILoginResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ILoginResult Result, LoginResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ILoginResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ILoginResult, LoginResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new LoginResultInfo(DeserializeILogin_Account(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.AccountMutationTypeData? DeserializeILogin_Account(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.AccountMutationTypeData(typename, login: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RegisterBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRegisterResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRegisterResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RegisterBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRegisterResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRegisterResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRegisterResult Result, RegisterResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRegisterResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRegisterResult, RegisterResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RegisterResultInfo(DeserializeIRegister_Account(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.AccountMutationTypeData? DeserializeIRegister_Account(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.AccountMutationTypeData(typename, register: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "register")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RefreshTokenBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRefreshTokenResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRefreshTokenResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RefreshTokenBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRefreshTokenResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRefreshTokenResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRefreshTokenResult Result, RefreshTokenResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRefreshTokenResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRefreshTokenResult, RefreshTokenResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RefreshTokenResultInfo(DeserializeIRefreshToken_Account(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.AccountMutationTypeData? DeserializeIRefreshToken_Account(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AccountMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.AccountMutationTypeData(typename, refreshToken: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "refreshToken")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateProjectBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateProjectResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateProjectResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CreateProjectBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateProjectResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateProjectResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateProjectResult Result, CreateProjectResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateProjectResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateProjectResult, CreateProjectResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateProjectResultInfo(DeserializeICreateProject_Project(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.ProjectMutationTypeData? DeserializeICreateProject_Project(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.ProjectMutationTypeData(typename, @add: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "add")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetProjectsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetProjectsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::app.Graphql.Status> _statusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetProjectsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetProjectsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _statusParser = serializerResolver.GetLeafValueParser<global::System.String, global::app.Graphql.Status>("Status") ?? throw new global::System.ArgumentException("No serializer for type `Status` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetProjectsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetProjectsResult Result, GetProjectsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetProjectsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetProjectsResult, GetProjectsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::app.Graphql.State.ProjectConnectionData? projectsId = default !;
            _entityStore.Update(session =>
            {
                projectsId = DeserializeIGetProjects_Projects(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Projects"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetProjectsResultInfo(projectsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.ProjectConnectionData? DeserializeIGetProjects_Projects(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.ProjectConnectionData(typename, nodes: UpdateIGetProjects_Projects_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds), pageInfo: DeserializeNonNullableIGetProjects_Projects_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetProjects_Projects_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var projects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                projects.Add(UpdateIGetProjects_Projects_NodesEntity(session, child, entityIds));
            }

            return projects;
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.ProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.ProjectEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "companyId")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), UpdateIGetProjects_Projects_Nodes_UserProjectsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userProjects"), entityIds), UpdateIGetProjects_Projects_Nodes_UsersEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.ProjectEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "companyId")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), UpdateIGetProjects_Projects_Nodes_UserProjectsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userProjects"), entityIds), UpdateIGetProjects_Projects_Nodes_UsersEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::app.Graphql.Status DeserializeNonNullableStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _statusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetProjects_Projects_Nodes_UserProjectsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var userProjects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userProjects.Add(UpdateIGetProjects_Projects_Nodes_UserProjectsEntity(session, child, entityIds));
            }

            return userProjects;
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_Nodes_UserProjectsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("UserProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.UserProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserProjectEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), UpdateIGetProjects_Projects_Nodes_UserProjects_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserProjectEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), UpdateIGetProjects_Projects_Nodes_UserProjects_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_Nodes_UserProjects_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), entity.Company, entity.Id, entity.Email, entity.PhoneNumber, entity.Status, entity.CompanyId));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetProjects_Projects_Nodes_UsersEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(UpdateIGetProjects_Projects_Nodes_UsersEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_Nodes_UsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), entity.Company, entity.Id, entity.Email, entity.PhoneNumber, entity.Status, entity.CompanyId));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::app.Graphql.State.PageInfoData DeserializeNonNullableIGetProjects_Projects_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.PageInfoData(typename, endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddUserInProjectBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IAddUserInProjectResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IAddUserInProjectResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddUserInProjectBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IAddUserInProjectResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddUserInProjectResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddUserInProjectResult Result, AddUserInProjectResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddUserInProjectResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddUserInProjectResult, AddUserInProjectResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddUserInProjectResultInfo(DeserializeIAddUserInProject_Project(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.ProjectMutationTypeData? DeserializeIAddUserInProject_Project(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.ProjectMutationTypeData(typename, addUser: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addUser")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetCompanyBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetCompanyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetCompanyResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::app.Graphql.Status> _statusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetCompanyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetCompanyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _statusParser = serializerResolver.GetLeafValueParser<global::System.String, global::app.Graphql.Status>("Status") ?? throw new global::System.ArgumentException("No serializer for type `Status` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCompanyResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCompanyResult Result, GetCompanyResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetCompanyResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCompanyResult, GetCompanyResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::app.Graphql.State.CompanyConnectionData? companiesId = default !;
            _entityStore.Update(session =>
            {
                companiesId = DeserializeIGetCompany_Companies(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Companies"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCompanyResultInfo(companiesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.CompanyConnectionData? DeserializeIGetCompany_Companies(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CompanyConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.CompanyConnectionData(typename, nodes: UpdateIGetCompany_Companies_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetCompany_Companies_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var companys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                companys.Add(UpdateIGetCompany_Companies_NodesEntity(session, child, entityIds));
            }

            return companys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetCompany_Companies_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Company", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.CompanyEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.CompanyEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.CompanyEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::app.Graphql.Status DeserializeNonNullableStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _statusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CreateUserBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateUserResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CreateUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateUserResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateUserResult Result, CreateUserResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateUserResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateUserResult, CreateUserResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateUserResultInfo(DeserializeICreateUser_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.UserMutationTypeData? DeserializeICreateUser_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserMutationType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.UserMutationTypeData(typename, @add: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "add")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetUsersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetUsersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::app.Graphql.Status> _statusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _statusParser = serializerResolver.GetLeafValueParser<global::System.String, global::app.Graphql.Status>("Status") ?? throw new global::System.ArgumentException("No serializer for type `Status` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetUsersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetUsersResult Result, GetUsersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetUsersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetUsersResult, GetUsersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::app.Graphql.State.UserConnectionData? usersId = default !;
            _entityStore.Update(session =>
            {
                usersId = DeserializeIGetUsers_Users(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Users"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetUsersResultInfo(usersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::app.Graphql.State.UserConnectionData? DeserializeIGetUsers_Users(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.UserConnectionData(typename, nodes: UpdateIGetUsers_Users_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds), pageInfo: DeserializeNonNullableIGetUsers_Users_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetUsers_Users_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(UpdateIGetUsers_Users_NodesEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId? UpdateIGetUsers_Users_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), UpdateIGetUsers_Users_Nodes_CompanyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "company"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "companyId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), UpdateIGetUsers_Users_Nodes_CompanyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "company"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phoneNumber")), DeserializeNonNullableStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "companyId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetUsers_Users_Nodes_CompanyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Company", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::app.Graphql.State.CompanyEntity? entity))
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.CompanyEntity(entity.Id, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Status));
                }
                else
                {
                    session.SetEntity(entityId, new global::app.Graphql.State.CompanyEntity(default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::app.Graphql.Status DeserializeNonNullableStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _statusParser.Parse(obj.Value.GetString()!);
        }

        private global::app.Graphql.State.PageInfoData DeserializeNonNullableIGetUsers_Users_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::app.Graphql.State.PageInfoData(typename, endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AccountMutationTypeData
    {
        public AccountMutationTypeData(global::System.String __typename, global::System.String? login = default !, global::System.String? register = default !, global::System.String? refreshToken = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Login = login;
            Register = register;
            RefreshToken = refreshToken;
        }

        public global::System.String __typename { get; }

        public global::System.String? Login { get; }

        public global::System.String? Register { get; }

        public global::System.String? RefreshToken { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ProjectMutationTypeData
    {
        public ProjectMutationTypeData(global::System.String __typename, global::System.String? @add = default !, global::System.String? addUser = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Add = @add;
            AddUser = addUser;
        }

        public global::System.String __typename { get; }

        public global::System.String? Add { get; }

        public global::System.String? AddUser { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ProjectConnectionData
    {
        public ProjectConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !, global::app.Graphql.State.PageInfoData? pageInfo = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::app.Graphql.State.PageInfoData? PageInfo { get; }

        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.String? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !, global::System.String? startCursor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        public global::System.String __typename { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more edges exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }

        ///<summary>When paginating backwards, the cursor to continue.</summary>
        public global::System.String? StartCursor { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class CompanyConnectionData
    {
        public CompanyConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserMutationTypeData
    {
        public UserMutationTypeData(global::System.String __typename, global::System.String? @add = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Add = @add;
        }

        public global::System.String __typename { get; }

        public global::System.String? Add { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UserConnectionData
    {
        public UserConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !, global::app.Graphql.State.PageInfoData? pageInfo = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::app.Graphql.State.PageInfoData? PageInfo { get; }

        public global::System.Int32? TotalCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class TmClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Project" => ParseProjectEntityId(obj, __typename), "UserProject" => ParseUserProjectEntityId(obj, __typename), "User" => ParseUserEntityId(obj, __typename), "Company" => ParseCompanyEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Project" => FormatProjectEntityId(entityId), "UserProject" => FormatUserProjectEntityId(entityId), "User" => FormatUserEntityId(entityId), "Company" => FormatCompanyEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCompanyEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCompanyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class TmClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public TmClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public static partial class TmClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::app.Graphql.State.TmClientStoreAccessor> AddTmClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::app.Graphql.State.TmClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.LoginMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.RegisterMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.RefreshTokenMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.CreateProjectMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetProjectsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.AddUserInProjectMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetCompanyQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.CreateUserMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.TmClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.ITmClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::app.Graphql.State.TmClientStoreAccessor>("TmClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("TmClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.ProjectEntity, global::app.Graphql.GetProjects_Projects_Nodes_Project>, global::app.Graphql.State.GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserProjectEntity, global::app.Graphql.GetProjects_Projects_Nodes_UserProjects_UserProject>, global::app.Graphql.State.GetProjects_Projects_Nodes_UserProjects_UserProjectFromUserProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, global::app.Graphql.GetProjects_Projects_Nodes_Users_User>, global::app.Graphql.State.GetProjects_Projects_Nodes_Users_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, global::app.Graphql.GetProjects_Projects_Nodes_UserProjects_User_User>, global::app.Graphql.State.GetProjects_Projects_Nodes_UserProjects_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, global::app.Graphql.GetCompany_Companies_Nodes_Company>, global::app.Graphql.State.GetCompany_Companies_Nodes_CompanyFromCompanyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.UserEntity, global::app.Graphql.GetUsers_Users_Nodes_User>, global::app.Graphql.State.GetUsers_Users_Nodes_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::app.Graphql.State.CompanyEntity, global::app.Graphql.GetUsers_Users_Nodes_Company_Company>, global::app.Graphql.State.GetUsers_Users_Nodes_Company_CompanyFromCompanyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.StatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.LoginModelInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.RegisterModelInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.CreateProjectVmInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ProjectFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.StringOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.StatusOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.CompanyFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ListFilterInputTypeOfUserFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.UserFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ListFilterInputTypeOfUserProjectFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.UserProjectFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.BooleanOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ComparableNullableOfDateTimeOffsetOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ComparableInt32OperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.ListFilterInputTypeOfProjectFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::app.Graphql.CreateUserVmInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ILoginResult>, global::app.Graphql.State.LoginResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ILoginResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.ILoginMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ILoginResult>, global::app.Graphql.State.LoginBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.ILoginResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.ILoginResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ILoginResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.LoginMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.ILoginMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.LoginMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRegisterResult>, global::app.Graphql.State.RegisterResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRegisterResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IRegisterMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRegisterResult>, global::app.Graphql.State.RegisterBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IRegisterResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IRegisterResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRegisterResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.RegisterMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IRegisterMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.RegisterMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRefreshTokenResult>, global::app.Graphql.State.RefreshTokenResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IRefreshTokenResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IRefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRefreshTokenResult>, global::app.Graphql.State.RefreshTokenBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IRefreshTokenResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IRefreshTokenResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IRefreshTokenResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.RefreshTokenMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IRefreshTokenMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.RefreshTokenMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateProjectResult>, global::app.Graphql.State.CreateProjectResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateProjectResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.ICreateProjectMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateProjectResult>, global::app.Graphql.State.CreateProjectBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.ICreateProjectResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateProjectResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateProjectResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.CreateProjectMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.ICreateProjectMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.CreateProjectMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetProjectsResult>, global::app.Graphql.State.GetProjectsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetProjectsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IGetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetProjectsResult>, global::app.Graphql.State.GetProjectsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IGetProjectsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetProjectsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetProjectsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.GetProjectsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IGetProjectsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IAddUserInProjectResult>, global::app.Graphql.State.AddUserInProjectResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IAddUserInProjectResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IAddUserInProjectMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IAddUserInProjectResult>, global::app.Graphql.State.AddUserInProjectBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IAddUserInProjectResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IAddUserInProjectResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IAddUserInProjectResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.AddUserInProjectMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IAddUserInProjectMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.AddUserInProjectMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetCompanyResult>, global::app.Graphql.State.GetCompanyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetCompanyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IGetCompanyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetCompanyResult>, global::app.Graphql.State.GetCompanyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IGetCompanyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetCompanyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetCompanyResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.GetCompanyQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IGetCompanyQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetCompanyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateUserResult>, global::app.Graphql.State.CreateUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.ICreateUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.ICreateUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateUserResult>, global::app.Graphql.State.CreateUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.ICreateUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.ICreateUserResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.CreateUserMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.ICreateUserMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.CreateUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetUsersResult>, global::app.Graphql.State.GetUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::app.Graphql.IGetUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.IGetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetUsersResult>, global::app.Graphql.State.GetUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::app.Graphql.IGetUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::app.Graphql.IGetUsersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.GetUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.IGetUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.GetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::app.Graphql.State.TmClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.TmClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::app.Graphql.ITmClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::app.Graphql.TmClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
