@page "/projects"
@attribute [Authorize]
@using app.Core.Services
@using app.Core.Moldes.PageResultModel
@inject NavigationManager _navigationManager
@inject ISnackbar  _alertService
@inject ILocalStorageService  _localStorageService
@inject IProjectService _client
@inject IUserService _userService
@inject IDialogService DialogService

<div Class="d-flex align-center mud-full-width p-2 mb-2 border-bottom">
    <MudText Typo="Typo.subtitle1">Projects</MudText>
    <MudToolBarSpacer />
    <input @bind-value="@Search" @oninput="(e)=> SearchProjets(e.Value.ToString())" type="text" class="form-control form-control-sm" style="width:160px !important;" placeholder="search" />
   
    <MudIconButton   Disabled="true" Class="ml-5" Size="Size.Small">@(((CurrentPage-1)*pageSize)+projects.Count) of @total</MudIconButton>
   
    <select style="width:75px !important;" class="form-control form-control-sm"   @onchange="@((e)=>ChangePageSize(e.Value.ToString()))">
        <option value="1">1</option>
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="100">100</option>
    </select>
    <MudIconButton  Disabled="@(!pInfo.HasPreviousPage)"  Size="Size.Small" OnClick="(e) => Previous()"Icon="@Icons.Filled.ChevronLeft"></MudIconButton>
    <MudIconButton  Disabled="@(!pInfo.HasNextPage)"  Size="Size.Small" OnClick="(e) => Next()"Icon="@Icons.Filled.ChevronRight"></MudIconButton>

    <MudIconButton Class="ml-5"  Size="Size.Small" OnClick="(e) => OpenAddDrawer()" Icon="@Icons.Filled.AddCircle"></MudIconButton>
</div>
<AddProject Close="CloseAddDrawerEvent" DrawerOpen="closeAddDrawer"></AddProject>


@if (projects is not null && projects.Count > 0)
{
    <MudGrid>
        <MudItem xs="12">
            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                @foreach (var item in projects)
                {

                    <MudItem>
                        <MudCard Style="@(AvatarStyle.GetBorderLeftStyle(item.Title)+"min-width: 390px; max-width:450px")">

                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar style="@AvatarStyle.Get(item.Title,"70px","70px","2.0rem")">@item.Title.First().ToString().ToUpper()</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@item.Title</MudText>
                                    @*<MudText Typo="Typo.body2"><MudChip Size="Size.Small" Color="Color.Primary">@item.Status.ToString()</MudChip></MudText>*@
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip Size="Size.Small" Color="Color.Primary">@item.Status.ToString()</MudChip>
                                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                                </CardHeaderActions>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudText Typo="Typo.body2">@item.Description</MudText>

                            </MudCardContent>
                            <MudCardActions Class="bg-gray-custom">
                                @{
                                    bool afterFirstt = false;
                                }
                                @foreach (var user in item.Users)
                                {
                                    @if (!afterFirstt)
                                    {
                                        <MudTooltip Text="@user.Username">
                                            <MudAvatar style="@AvatarStyle.Get(user.Username,"","","1.0rem")" Size="Size.Small">
                                                @user.Username.ToUpper().FirstOrDefault()
                                            </MudAvatar>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="@user.Username">
                                            <MudAvatar style="@(AvatarStyle.Get(user.Username,"","","1.0rem")+" margin-left: -10px;")" Size="Size.Small">
                                                @user.Username.ToUpper().FirstOrDefault()
                                            </MudAvatar>
                                        </MudTooltip>
                                    }


                                    {
                                        afterFirstt = true;
                                    }

                                }

                                <MudMenu FullWidth="true" Style="min-width:250px !important;" Size="Size.Small" Direction="Direction.Right">
                                    <ActivatorContent>
                                        <MudChip Icon="@Icons.Material.Filled.PersonAddAlt" Size="Size.Small" Color="Color.Primary">Users</MudChip>
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudPaper Elevation="0" Style="padding:5px;">
                                            <AddProjectUser ProjectId="@item.Id" Success="UserAddedEvent"></AddProjectUser>
                                        </MudPaper>


                                    </ChildContent>
                                </MudMenu>



                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }


            </MudGrid>
        </MudItem>
        
    </MudGrid>
}


@code {
    public List<ProjectVm> projects = new List<ProjectVm>();
    long total;
    int pageSize=1;
    int CurrentPage = 1;
    bool closeAddDrawer = false;
    ProjectFilterInput filter = new ProjectFilterInput();
    PagingFilter pagingFilter = new PagingFilter();
    PageInfo pInfo = new PageInfo();
    public bool _isOpen;
    bool loading = false;
    string projectId;
    string search;
    string Search
    {
        get { return search; }
        set
        {
            search = value;

        }
    }
   
    protected override async Task OnInitializedAsync()
    {

        pagingFilter.TakeFirst = pageSize;
        pagingFilter.After = null;
        pagingFilter.Before = null;
        pagingFilter.TakePrevious = null;
        filter.Title = new StringOperationFilterInput() { Contains = "" };
        await GetData();
    }
    #region Scroll
    private async Task ChangePageSize(string value)
    {
        pageSize = Convert.ToInt32(value);
        pagingFilter.TakeFirst = pageSize;
        pagingFilter.After = null;
        pagingFilter.Before = null;
        pagingFilter.TakePrevious = null;
        await GetData();
    }
    private async Task Next()
    {

        pagingFilter.TakeFirst = pageSize;
        pagingFilter.After = pInfo.EndCursor;
        pagingFilter.TakePrevious = null;
        pagingFilter.Before = null;
        await GetData();
        CurrentPage++;
    }
    private async Task Previous()
    {

        pagingFilter.After = null;
        pagingFilter.TakeFirst = null;
        pagingFilter.TakePrevious = pageSize;
        pagingFilter.Before = pInfo.StartCursor;
        await GetData();
        CurrentPage--;
    }


    #endregion
    public async Task GetData()
    {

        var result = await _client.GetProjectsAsync(pagingFilter, filter);
        if (result?.Data is not null)
        {
            projects=result?.Data;
            pInfo = result?.PageInfo;
            total = result.TotalCount;
        }
    }

    private async Task CloseAddDrawerEvent(bool value)
    {
        closeAddDrawer = value;
        await OnInitializedAsync();
    }
    private async Task UserAddedEvent(bool value)
    {
        if (value)
            await OnInitializedAsync();
    }

    private void OpenAddDrawer()
    => closeAddDrawer = true;

    public void ToggleOpen(string val)
    {
        if (!_isOpen)
            projectId = val;
        _isOpen = !_isOpen;
    }
    public async Task SearchProjets(string value)
    {
        search = value;
        filter.Title = new StringOperationFilterInput() { Contains = search };
        await GetData();
    }
}