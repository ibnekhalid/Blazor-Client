@inject IDialogService DialogService
@inject ISnackbar  _alertService
@inject IProjectService _client
@using Blazored.TextEditor

<MudDrawerContainer Class="mud-height-full">
    <MudDrawer @bind-Open="@DrawerOpen" Width="40vw" Fixed="true" Anchor="Anchor.Right" Elevation="0" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6"> Add Project</MudText>
        </MudDrawerHeader>
        <MudPaper Class="px-5" Elevation="0">
            <EditForm Model="@project" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class=" form-group">
                    <label>Title</label>
                    <InputText @bind-Value="project.Title" class="form-control" placeholder="give it a name" />
                    <ValidationMessage For="@(() => project.Title)" />

                </div>
                <div class=" form-group">
                    <label>Description</label>
                    <BlazoredTextEditor @ref="@QuillHtml" >
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                           
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
                <MudDivider Class="my-2 mt-5 mb-5" />
                <div class="form-group text-right">
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="loading" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">Save</MudButton>
                </div>
            </EditForm>
        </MudPaper>

    </MudDrawer>
</MudDrawerContainer>


@code {
    [Parameter]
    public EventCallback<bool> Close { get; set; }
    [Parameter]
    public bool DrawerOpen { get; set; } = false;
    BlazoredTextEditor QuillHtml;


    void CompanyDrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
    }
    bool loading = false;


    public ProjectInput project = new ProjectInput();

    private async Task Cancel()
    {
        await Close.InvokeAsync(false);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            project.Description = await this.QuillHtml.GetHTML();
            var result = await _client.CreateProjects(project);
            if (result.isError)
            {
                _alertService.Add(result.result, Severity.Error);

                return;
            }
            _alertService.Add("Project has been created.", Severity.Success);
            await Close.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            _alertService.Add(ex.Message, Severity.Error);
            await Close.InvokeAsync(false);
            StateHasChanged();
        }
        //In a real world scenario this bool would probably be a service to delete the item from api/database

    }
}
