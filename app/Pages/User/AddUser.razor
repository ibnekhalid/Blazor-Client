@inject IDialogService DialogService
@inject ISnackbar  _alertService
@inject IUserService _client
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer @bind-Open="@DrawerOpen" Width="40vw" Fixed="true" Anchor="Anchor.Right" Elevation="0" Variant="@DrawerVariant.Temporary">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6"> Add User</MudText>
            </MudDrawerHeader>
            <MudPaper Class="px-5" Elevation="0">
                <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <div class=" form-group">
                        <label>Email</label>
                        <InputText @bind-Value="user.Email" class="form-control" placeholder="user@domain.com" />
                        <ValidationMessage For="@(() => user.Email)" />

                    </div>
                    
                    <MudDivider Class="my-2 mt-5 mb-5" />
                    <div class="form-group text-right">
                        <MudButton Variant="Variant.Outlined"  Size="Size.Small" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
                        <MudButton Disabled="loading"  Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">Save</MudButton>
                    </div>
                </EditForm>
            </MudPaper>

        </MudDrawer>
</MudDrawerContainer>


        @code {
            [Parameter]
            public EventCallback<bool> Close { get; set; }
            [Parameter]
            public bool DrawerOpen { get; set; } = false;

            void CompanyDrawerToggle()
            {
                DrawerOpen = !DrawerOpen;
            }
            bool loading = false;


            public UserInput user = new UserInput();

            private async Task Cancel()
            {
                await Close.InvokeAsync(false);
            }

            private async Task OnValidSubmit()
            {
                try
                {
                    var result = await _client.CreateUser(user);
                    if (result.isError)
                    {
                        _alertService.Add(result.result, Severity.Error);

                        return;
                    }
                    _alertService.Add("User has been created.", Severity.Success);
                    await Close.InvokeAsync(false);
                }
                catch (Exception ex)
                {
                    _alertService.Add(ex.Message, Severity.Error);
                    await Close.InvokeAsync(false);
                    StateHasChanged();
                }
                //In a real world scenario this bool would probably be a service to delete the item from api/database

            }
        }
