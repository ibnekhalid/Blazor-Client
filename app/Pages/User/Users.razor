@page "/Users"
@attribute [Authorize]
@using app.Core.Moldes
@using app.Core.Services
@inject NavigationManager _navigationManager
@inject ISnackbar  _alertService
@inject ILocalStorageService  _localStorageService
@inject IUserService _client

<div Class="d-flex align-center mud-full-width p-2 mb-2 border-bottom">
    <MudText Typo="Typo.subtitle1">Users</MudText>
    <MudToolBarSpacer />
    <input @bind-value="@Search" @oninput="(e)=> SearchUsers(e.Value.ToString())" type="text" class="form-control form-control-sm" style="width:160px !important;" placeholder="search" />
    <MudIconButton OnClick="(e)=> OpenAddDrawer()" Icon="@Icons.Filled.AddCircle"></MudIconButton>
</div>

<AddUser Close="CloseAddDrawerEvent" DrawerOpen="closeAddDrawer"></AddUser>
@if (users is not null && users.Count > 0)
{<MudGrid>
        <MudItem xs="12">
            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                @foreach (var item in users)
                {
                    <MudItem>
                        <MudCard Style="@(AvatarStyle.GetBorderLeftStyle(item.Username)+"min-width: 390px;")">
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar style="@AvatarStyle.Get(item.Username,"70px","70px","2.0rem")">@item.Username.First().ToString().ToUpper()</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@item.Username</MudText>
                                    <MudText Typo="Typo.body2">@item.Email</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip Size="Size.Small" Color="Color.Primary">@item.Status.ToString()</MudChip>
                                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                                </CardHeaderActions>
                            </MudCardHeader>


                            <MudCardActions Class="bg-gray-custom">
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }


            </MudGrid>
        </MudItem>
    </MudGrid>

}


@code {
    public List<UserVm> users;
    bool closeAddDrawer = false;
    UserFilterInput filter = new UserFilterInput();
    string search;
    string Search
    {
        get { return search; }
        set
        {
            search = value;

        }
    }
    protected override async Task OnInitializedAsync()
    {
        filter.Email = new StringOperationFilterInput() { Contains = "" };
        await GetData();
    }
    public async Task GetData()
    {
        var result = await _client.GetUsers(filter);
        users = result.Data;
    }

    private async Task CloseAddDrawerEvent(bool value)
    {
        closeAddDrawer = value;
        await OnInitializedAsync();
    }
    private void OpenAddDrawer()
        => closeAddDrawer = true;
    public async Task SearchUsers(string value)
    {
        search = value;
        filter.Email = new StringOperationFilterInput() { Contains = search };
        await GetData();
    }
}